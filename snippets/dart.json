{
  "Dart Info": {
    "prefix": ["foolsInfo", "languageInfo", "info"],
    "body": [
      "Typing: Statically typed",
      "Paradigm: Multi-paradigm: object-oriented, functional, imperative, reflective",
      "Compilation: Compiled to native code or transpiled to JavaScript",
      "Concurrency: Supports isolates for concurrent execution"
    ],
    "description": "Provides general information about the Dart programming language."
  },
  "Dart Entry Point": {
    "prefix": ["foolsEntry", "entry", "start", "startingPoint"],
    "body": [
      "// Dart Entry Point",
      "// To run this program, use: `dart run filename.dart`",
      "",
      "void main() {",
      "  // Your code here",
      "}"
    ],
    "description": "Creates the entry point of a Dart application."
  },
  "Dart Project Structure (High-Level)": {
    "prefix": ["foolsStructure", "structure", "architecture"],
    "body": [
      "// Recommended High-Level Dart Project Structure:",
      "",
      "// - lib/",
      "//   - Contains the main Dart source files for the project.",
      "//   - Organize by feature or functionality, for example:",
      "//     - models/",
      "//     - views/",
      "//     - controllers/",
      "//     - services/",
      "",
      "// - web/ or bin/",
      "//   - For web projects, `web/` contains HTML, CSS, and client-side Dart.",
      "//   - For command-line or server-side projects, `bin/` contains the main entry point scripts.",
      "",
      "// - test/",
      "//   - Contains test files for the project, mirroring the structure of `lib/`.",
      "",
      "// - pubspec.yaml",
      "//   - The project's package and dependency management file.",
      "",
      "// - build/",
      "//   - Contains the output of the Dart build system.",
      "",
      "// - doc/ or docs/",
      "//   - Documentation for the project.",
      "",
      "// Note:",
      "// - Adjust the structure as needed based on the specific project type and requirements.",
      "// - Use `web/` for web projects and `bin/` for server-side or command-line projects."
    ],
    "description": "Explains a high-level project structure for Dart."
  },

  "Dart Mathematical Operators": {
    "prefix": ["foolsOperators", "operators", "mathDocs"],
    "body": [
      "// Dart Mathematical Operators",
      "// Addition: +",
      "// Subtraction: -",
      "// Multiplication: *",
      "// Exponentiation: **",
      "// Division: /",
      "// Modulus: %",
      "// Increment: ++",
      "// Decrement: --",
      "// Assignment: =",
      "// Addition assignment: +=",
      "// Subtraction assignment: -=",
      "// Multiplication assignment: *=",
      "// Division assignment: /=",
      "// Modulus assignment: %="
    ],
    "description": "Lists the mathematical operators in Dart."
  },
  "Dart Equal To": {
    "prefix": ["foolsEqual", "equal"],
    "body": ["=="],
    "description": "Dart equal to operator (structural equality for objects)."
  },
  "Dart Not Equal To": {
    "prefix": ["foolsNotEqual", "notEqual", "doesNotEqual"],
    "body": ["!="],
    "description": "Dart not equal to operator."
  },
  "Dart Boolean Operators": {
    "prefix": ["foolsOperatorsBool", "booleanOperators", "logic"],
    "body": [
      "// Dart Boolean Operators",
      "// Logical AND: &&",
      "// Logical OR: ||",
      "// Logical NOT: !",
      "// Equality: ==",
      "// Inequality: !=",
      "// Greater than: >",
      "// Less than: <",
      "// Greater than or equal to: >=",
      "// Less than or equal to: <="
    ],
    "description": "Lists the boolean operators in Dart."
  },
  "Dart Type Check": {
    "prefix": ["foolsTypeCheck", "checkType", "getType", "typeOf"],
    "body": ["${1:variable}.runtimeType"],
    "description": "Gets the type of a variable in Dart."
  },
  "Dart This Type Check": {
    "prefix": ["thisTypeCheck", "thisType", "getThisType"],
    "body": ["$CLIPBOARD.runtimeType"],
    "description": "Gets the type of the variable in the clipboard in Dart."
  },  
  "Dart Type Comparison": {
    "prefix": ["foolsTypeCompare", "compareTypes"],
    "body": [
      "// Check if two variables have the same type:",
      "if (${1:variable1}.runtimeType == ${2:variable2}.runtimeType) {",
      "  // Your code here",
      "}"
    ],
    "description": "Compares the types of two variables in Dart."
  },
  "Dart Type Conversion": {
    "prefix": ["foolsTypeCast", "convert", "cast"],
    "body": [
      "// Dart Type Conversion:",
      "",
      "// Implicit conversions (compiler performs automatically):",
      "// - int to double (if no precision loss).",
      "",
      "// Explicit conversions (using casts):",
      "// - variable as Type  // Safe cast (returns null if conversion fails)",
      "// - Type.castFrom(variable)  // Conversion methods",
      "",
      "// Note:",
      "// - Be cautious with explicit conversions, as they can lead to data loss or errors if the conversion is not valid."
    ],
    "description": "Explains type conversion in Dart."
  },
  "Dart Types": {
    "prefix": ["foolsTypes", "types", "allTypes", "languageTypes", "builtInTypes", "dataTypes"],
    "body": [
      "$BLOCK_COMMENT_START",
      "Dart is a statically typed language.",
      "",
      "Types in Dart include:",
      "- num: A number type that can be either an int or a double",
      "- int: Integer",
      "- BigInt: Arbitrary-precision integer",
      "- double: Double-precision floating-point number",
      "- String: A sequence of characters",
      "- bool: Boolean",
      "- List: A list of elements",
      "- Map: A collection of key-value pairs",
      "- Set: A collection of unique elements",
      "- Runes: For expressing Unicode characters in a String",
      "- Symbol: An opaque, dynamic representation of a string in Dart",
      "",
      "Read more here: https://dart.dev/language/built-in-types",
      "$BLOCK_COMMENT_END"
    ],
    "description": "Prints out all the basic types in Dart."
  },
  "Dart String Type": {
    "prefix": ["foolsTypesString", "stringType", "typeString", "textType", "typeText"],
    "body": ["String"],
    "description": "The Dart String type."
  },
  "Dart Integer Type": {
    "prefix": ["foolsTypesInt", "intType", "typeInt"],
    "body": ["int"],
    "description": "The Dart int type."
  },
  "Dart Double Type": {
    "prefix": ["foolsTypesNum", "numberType", "typeNumber", "doubleType", "typeDouble"],
    "body": ["double"],
    "description": "The Dart double type."
  },
  "Dart Float Type": {
    "prefix": ["foolsTypesNumAlt", "floatType", "typeFloat"],
    "body": ["float"],
    "description": "The Dart float type."
  },
  "Dart Boolean Type": {
    "prefix": ["foolsTypesBool", "booleanType", "typeBool"],
    "body": ["bool"],
    "description": "The Dart bool type."
  },
  "Dart Boolean True": {
    "prefix": ["foolsTypesBoolTrue", "true", "booleanTrue", "on"],
    "body": ["true"],
    "description": "The Dart true value."
  },
  "Dart Boolean False": {
    "prefix": ["foolsTypesBoolFalse", "false", "off", "booleanFalse"],
    "body": ["false"],
    "description": "The Dart false value."
  },
  "Dart Character Type": {
    "prefix": ["foolsTypesChar"],
    "body": ["char"],
    "description": "The Dart char type."
  },
  "Dart Date Type": {
    "prefix": ["foolsTypesDate", "dateType", "typeDate", "timeType", "timestampType", "dateTimeType"],
    "body": ["DateTime"],
    "description": "The Dart DateTime type."
  },
  "Dart Map Type": {
    "prefix": ["foolsTypesMap", "mapType", "typeMap", "hashmapType", "structType", "dictType", "typeDict", "typeScruct"],
    "body": ["Map<${1:keyType}, ${2:valueType}>"],
    "description": "The Dart Map type."
  },
  "Dart List Type": {
    "prefix": ["foolsTypesList", "listType", "typeList", "typeArray"],
    "body": ["List<${1:type}>"],
    "description": "The Dart List type."
  },
  "Dart Dynamic Type": {
    "prefix": ["foolsTypesDynamic", "typeDynamic", "typeAny", "dynamicType", "anyType"],
    "body": ["dynamic"],
    "description": "The Dart dynamic type."
  },
  "Dart Date Now": {
    "prefix": ["foolsNow", "now", "currentTime", "dateNow"],
    "body": ["DateTime.now()"],
    "description": "The Dart DateTime.now() method."
  },
  "Dart Null Type": {
    "prefix": ["foolsTypesNull", "nullType", "typeNull"],
    "body": ["null"],
    "description": "The Dart null value."
  },
  "Dart Create Variable": {
    "prefix": ["foolsVar", "variable", "createVariable", "newVariable"],
    "body": ["${1|var,bool,String,int,double,num,List<Map<String\\, dynamic>>,Map<String\\, dynamic>,dynamic,Set<String>|} = $2;"],
    "description": "Creates a variable in Dart using the var keyword."
  },
  "Variable Declaration Syntax": {
    "prefix": ["foolsVarSyntax", "variableSyntax", "howToVariables", "letSyntax"],
    "body": [
      "// Dart Variable Declaration Syntax:",
      "",
      "// - var: (Scope: Block)",
      "//   - Type is automatically inferred by the compiler.",
      "//   - Preferred for most variable declarations.",
      "",
      "// - type: (Scope: Block)",
      "//   - Explicitly specify the variable's type.",
      "//   - Use when var deduction is not desired or not possible.",
      "",
      "// - const: (Scope: Block)",
      "//   - Cannot be reassigned or redeclared.",
      "//   - Use for values that should remain constant.",
      "",
      "// - final: (Scope: Block)",
      "//   - Cannot be reassigned, but can be declared without initialization.",
      "//   - Use for variables that will be assigned a value later but should not change after that.",
      "",
      "// Note:",
      "// - Use 'var' for most variable declarations.",
      "// - Use 'const' for values that are known at compile time.",
      "// - Use 'final' for variables that will be assigned later but should not change."
    ],
    "description": "Explains Dart variable declaration syntax"
  },
  "Dart Create Typed Variable": {
    "prefix": ["foolsVarTyped", "typedVariable", "variableWithType"],
    "body": ["${1:Type} ${2:myVar} = $3;"],
    "description": "Creates a typed variable in Dart."
  },
  "Dart Create Nullable Variable": {
    "prefix": ["foolsVarNullable", "variableNullable", "nullableVariable", "nil", "none", "nothing", "null", "option"],
    "body": ["${1:Type}? ${2:myVar} = $3;"],
    "description": "Creates a nullable variable in Dart."
  },
  "Dart Interpolate String": {
    "prefix": ["foolsInterpolate", "interpolate", "variableExpansion", "variableSubstitution", "stringPlaceholders", "stringInterpolation"],
    "body": ["'Your string here \\${${1:variable}}'"],
    "description": "Interpolates a variable into a string in Dart."
  },
  "Dart Concatenate Strings": {
    "prefix": ["foolsConcat", "concatenate", "combine"],
    "body": ["'Your string here ' + ${1:variable}"],
    "description": "Concatenates two strings in Dart."
  },
  "Dart Create String Variable": {
    "prefix": ["foolsVarString", "string", "stringVariable", "variableString", "text", "createString", "createText"],
    "body": ["String ${1:myString} = ${2:'Your string here'};"],
    "description": "Creates a string variable in Dart."
  },
  "Dart Create Multiline String Variable": {
    "prefix": ["foolsVarStringMulti", "multiLineString", "varStringMulti", "stringVariableMulti", "createMultiLineString"],
    "body": ["String ${1:myString} = '''", "${2:Your string here}", "''';"],
    "description": "Creates a multi-line string variable in Dart."
  },
  "Dart Create Integer Variable": {
    "prefix": ["foolsVarInt", "integer", "int", "variableInt", "intVariable", "createInt"],
    "body": ["int ${1:myInt} = ${2:0};"],
    "description": "Creates an integer variable in Dart."
  },
  "Dart Create Double Variable": {
    "prefix": ["foolsVarDouble", "double", "doubleVariable", "variableDouble", "createDouble"],
    "body": ["double ${1:myDouble} = ${2:0.0};"],
    "description": "Creates a double variable in Dart."
  },
  "Dart Create Boolean Variable": {
    "prefix": ["foolsVarBool", "variableBool", "bool", "boolVariable", "createBool"],
    "body": ["bool ${1:myBool} = ${2:true};"],
    "description": "Creates a boolean variable in Dart."
  },
  "Dart Create List Variable": {
    "prefix": ["foolsVarList", "createList", "listVariable", "arrayVariable", "variableList", "variableArray", "list", "array"],
    "body": ["List<${1:Type}> ${2:myList} = [${3:items}];"],
    "description": "Creates a list variable in Dart."
  },
  "Dart Create Map Variable": {
    "prefix": ["foolsVarMap", "createMap", "createStruct", "variableMap", "variableStruct", "mapVariable", "structVariable", "dictVariable", "variableDict", "createDict"],
    "body": [
      "Map<${1:KeyType}, ${2:ValueType}> ${3:myMap} = {",
      "  ${4:key1}: ${5:value1},",
      "  ${6:key2}: ${7:value2}",
      "};"
    ],
    "description": "Creates a map variable in Dart."
  },
  "Dart Create Date Variable": {
    "prefix": ["foolsVarDate", "dateVariable", "variableDate", "date"],
    "body": [
      "DateTime ${1:myDate} = DateTime(${2:year}, ${3:month}, ${4:day});"
    ],
    "description": "Creates a date variable in Dart."
  },
  "Dart Create Constant": {
    "prefix": ["foolsConst", "constant"],
    "body": ["const ${1:myConst} = $2;"],
    "description": "Creates a constant variable in Dart using the const keyword."
  },
  "Dart Static Variable": {
    "prefix": ["foolsVarStatic", "staticVariable", "associatedConstant"],
    "body": [
      "static ${2:var} ${3:myStaticVar} = ${4:value};",
      "",
      "// Access the static variable",
      "// MyClass.${3:myStaticVar}"
    ],
    "description": "Creates a static variable in a Dart class."
  },
  "Dart Generate Map": {
    "prefix": ["foolsGenMap", "generateMap"],
    "body": [
      "var ${1:myMap} = Map.fromIterable(List.generate(${2:length}, (index) => index),",
      "  key: (item) => 'key' + item.toString(),",
      "  value: (item) => 'value' + item.toString(),",
      ");"
    ],
    "description": "Generates a map with a specific number of key-value pairs in Dart."
  },
  "Dart Generate List": {
    "prefix": ["foolsGenList", "generateList", "listGen"],
    "body": [
      "var ${1:myList} = List.generate(${2:length}, (index) => ${3:'item'} + index.toString());"
    ],
    "description": "Generates a list of a specific length in Dart."
  },
  "Dart Print": {
   "prefix": ["foolsPrint", "print", "log", "systemOut", "write", "consoleLog"],
    "body": ["print(${1:'Your message here'});"],
    "description": "Prints a message to the console in Dart."
  },
  "Dart Print Multi": {
    "prefix": ["foolsPrintMulti", "printMultiLine"],
    "body": ["print('''", "${1:Line 1}", "${2:Line 2}", "${3:Line 3}", "''');"],
    "description": "Prints a multi-line message to the console in Dart."
  },
  "Dart For Loop": {
    "prefix": ["foolsForLoop", "forLoop", "forX"],
    "body": [
      "for (int ${1:i} = 0; $1 < ${2:10}; $1++) {",
      "  // Your code here",
      "}"
    ],
    "description": "Creates a for loop that iterates through a set of numbers with the index in Dart."
  },
  "Dart For...In Loop": {
    "prefix": ["foolsForInLoop", "forIn", "forOf"],
    "body": [
      "for (var item in ${1:iterable}) {",
      "  ${2:// Your code here}",
      "}"
    ],
    "description": "Iterates over an iterable object in Dart."
  },
  "Dart While Loop": {
    "prefix": ["foolsWhileLoop", "whileLoop", "whileTrue"],
    "body": ["while (${1:condition}) {", "  ${2:// Your code here}", "}"],
    "description": "Creates a while loop in Dart."
  },
  "Dart Switch Statement": {
    "prefix": ["foolsSwitch", "switch", "switchStatement", "select", "case", "when"],
    "body": [
      "switch (${1:variable}) {",
      "  case ${2:value1}:",
      "    ${3:// Your code here}",
      "    break;",
      "  case ${4:value2}:",
      "    ${5:// Your code here}",
      "    break;",
      "  default:",
      "    ${6:// Your code here}",
      "}"
    ],
    "description": "Creates a switch statement in Dart."
  },
  "Dart Function": {
    "prefix": ["foolsFunc", "function", "subprogram", "procedure", "subroutine", "method"],
    "body": [
      "${1:void} ${2:myFunction}(${3:}) {",
      "  ${4:// Your code here}",
      "}"
    ],
    "description": "Creates a function in Dart."
  },
  "Dart Function Args": {
    "prefix": ["foolsFuncArgs", "functionArgs", "functionWithArgs"],
    "body": [
      "// In Dart, functions can have optional named or positional parameters with default values.",
      "${1:void} ${2:myFunction}(${3:Type} ${4:arg1}, [${5:Type} ${6:arg2} = ${7:defaultValue}]) {",
      "  ${8:// Your code here}",
      "}"
    ],
    "description": "Creates a function with arguments in Dart, including an optional positional argument with a default value."
  },
  "Dart Function Named Args": {
    "prefix": ["foolsFuncArgsNamed", "functionNamedArgs"],
    "body": [
      "${1:void} ${2:myFunction}({${3:arg1}, ${4:arg2}}) {",
      "  ${5:// Your code here}",
      "}"
    ],
    "description": "Creates a function with named arguments in Dart."
  },
  "Dart Function Arrow": {
    "prefix": ["foolsFuncArrow", "arrowFunction", "functionArrow"],
    "body": ["${1:Type} ${2:myFunction}(${3:parameters}) => ${4:expression};"],
    "description": "Creates a function using the arrow syntax in Dart."
  },
  "Dart Function Anonymous": {
    "prefix": ["foolsFuncAnon", "anonFunc", "anonymous", "closure" ,"lambda", "functionLiteral", "foolsFuncLambda"],
    "body": ["(${1:parameters}) {", "  ${2:// Your code here}", "}"],
    "description": "Creates an anonymous function in Dart."
  },
  "Dart Function Syntax": {
    "prefix": ["foolsFuncSyntax", "functionSyntax", "functionDocs"],
    "body": [
      "// Dart Function Syntax",
      "// Basic function: returnType functionName(parameters) { ... }",
      "// Function with arguments: returnType functionName(arg1Type arg1, arg2Type arg2, ...) { ... }",
      "// Function with named arguments: returnType functionName({arg1Type arg1, arg2Type arg2, ...}) { ... }"
    ],
    "description": "Outlines the syntax for functions in Dart."
  },
  "Dart Comment": {
    "prefix": ["foolsComment", "comment", "note"],
    "body": ["// ${1:Your comment here}"],
    "description": "Creates a single-line comment in Dart."
  },
  "Dart Multi-Line Comment": {
    "prefix": ["foolsCommentMulti", "multiLineComment", "commentMultiLine", "blockComment"],
    "body": ["/*", " * ${1:Your comment here}", " */"],
    "description": "Creates a multi-line comment in Dart."
  },
  "Dart Throw Exception": {
    "prefix": ["foolsThrow", "throwError", "throwException"],
    "body": ["throw ${1:Exception('Your message here')};"],
    "description": "Throws an exception in Dart."
  },
  "Dart Try Catch": {
    "prefix": ["foolsTryCatch", "tryCatch"],
    "body": [
      "try {",
      "  ${1:// Your code here}",
      "} catch (${2:exception}) {",
      "  ${3:// Your code here}",
      "}"
    ],
    "description": "Creates a try...catch block in Dart."
  },
  "Dart Enum": {
    "prefix": ["foolsEnum", "enum"],
    "body": [
      "enum ${1:MyEnum} {",
      "  ${2:value1},",
      "  ${3:value2},",
      "  // Add more values here",
      "}"
    ],
    "description": "Creates an enum in Dart."
  },
  "Dart Class": {
    "prefix": ["foolsClass", "class", "objectTemplate"],
    "body": ["class ${1:MyClass} {", "  ${2:// Your code here}", "}"],
    "description": "Creates a class in Dart."
  },
  "Dart If Statement": {
    "prefix": ["foolsIf", "ifStatement"],
    "body": ["if (${1:condition}) {", "  ${2:// Your code here}", "}"],
    "description": "Creates an if statement in Dart."
  },
  "Dart If Else Statement": {
    "prefix": ["foolsIfElse", "ifElseStatement"],
    "body": [
      "if (${1:condition}) {",
      "  ${2:// Your code here}",
      "} else if (${3:condition}) {",
      "  ${4:// Your code here}",
      "} else {",
      "  ${5:// Your code here}",
      "}"
    ],
    "description": "Creates an if...else statement in Dart."
  },
  "Dart Ternary Operator": {
    "prefix": ["foolsTernary", "ternary", "conditionalOperator"],
    "body": ["${1:condition} ? ${2:trueValue} : ${3:falseValue}"],
    "description": "Creates a ternary operator in Dart."
  },
  "Dart Lambda Function": {
    "prefix": "foolsLambda",
    "body": ["(${1:parameters}) => ${2:expression}"],
    "description": "Creates a lambda function in Dart."
  }
}
