{
  "Java Info": {
    "prefix": ["foolsInfo", "languageInfo", "info"],
    "body": [
      "Typing: Statically typed",
      "Paradigm: Multi-paradigm: object-oriented, imperative, concurrent",
      "Compilation: Compiled to bytecode, executed on the Java Virtual Machine (JVM)",
      "Concurrency: Supports multi-threading and concurrent programming with the java.util.concurrent package"
    ],
    "description": "Provides general information about the Java programming language."
  },
  "Java Entry Point": {
    "prefix": ["foolsEntry", "entry", "start", "startingPoint"],
    "body": [
      "// Java Entry Point",
      "// To run this program, use: `java Main.java`",
      "",
      "public class Main {",
      "    public static void main(String[] args) {",
      "        // Your code here",
      "    }",
      "}"
    ],
    "description": "Creates the entry point of a Java application."
  },
  "Java Project Structure (High-Level)": {
    "prefix": ["foolsStructure", "structure", "architecture"],
    "body": [
      "// Recommended High-Level Java Project Structure:",
      "",
      "// - src/",
      "//   - main/",
      "//     - java/",
      "//       - Contains all Java source files organized by package, e.g.,",
      "//         - com/example/myapp/",
      "//     - resources/",
      "//       - Contains resources such as properties files, XML configurations, etc.",
      "//   - test/",
      "//     - java/",
      "//       - Contains all Java test files organized similarly to the main source files.",
      "//     - resources/",
      "//       - Contains resources used for testing, such as test configurations.",
      "",
      "// - lib/",
      "//   - Contains external libraries or JAR files if not using a build tool like Maven or Gradle.",
      "",
      "// - build/ or target/",
      "//   - Contains compiled bytecode and other build artifacts. 'target' is common with Maven.",
      "",
      "// - docs/",
      "//   - Documentation related to the project.",
      "",
      "// - scripts/",
      "//   - Contains build scripts, utility scripts, etc.",
      "",
      "// Build Tools:",
      "// - For Maven projects, the pom.xml file at the root defines build configurations and dependencies.",
      "// - For Gradle projects, the build.gradle file at the root defines build configurations and dependencies.",
      "",
      "// Note:",
      "// - This structure can vary depending on the build tool (Maven, Gradle, etc.) and project needs."
    ],
    "description": "Explains a high-level project structure for Java."
  },
  "Java Mathematical Operators": {
    "prefix": ["foolsOperators", "operators", "mathDocs"],
    "body": [
      "// Java Mathematical Operators",
      "// Addition: +",
      "// Subtraction: -",
      "// Multiplication: *",
      "// Exponentiation: Math.pow(base, exponent)",
      "// Division: /",
      "// Modulus: %",
      "// Increment: ++",
      "// Decrement: --",
      "// Assignment: =",
      "// Addition assignment: +=",
      "// Subtraction assignment: -=",
      "// Multiplication assignment: *=",
      "// Division assignment: /=",
      "// Modulus assignment: %="
    ],
    "description": "Lists the mathematical operators in Java."
  },
  "Java Equal To": {
    "prefix": ["foolsEqual", "equal"],
    "body": ["=="],
    "description": "Java equal to operator."
  },
  "Java Not Equal To": {
    "prefix": ["foolsNotEqual", "notEqual", "doesNotEqual"],
    "body": ["!="],
    "description": "Java not equal to operator."
  },
  "Java Boolean Operators": {
    "prefix": ["foolsOperatorsBool", "booleanOperators", "logic"],
    "body": [
      "// Java Boolean Operators",
      "// Logical AND: &&",
      "// Logical OR: ||",
      "// Logical NOT: !",
      "// Equality: ==",
      "// Inequality: !=",
      "// Greater than: >",
      "// Less than: <",
      "// Greater than or equal to: >=",
      "// Less than or equal to: <="
    ],
    "description": "Lists the boolean operators in Java."
  },
  "Java Type Check": {
    "prefix": ["foolsTypeCheck", "checkType", "getType", "typeOf"],
    "body": ["${1:variable}.getClass()"],
    "description": "Gets the type of a variable in Java."
  },
  "Java This Type Check": {
    "prefix": ["thisTypeCheck", "thisType", "getThisType"],
    "body": ["$CLIPBOARD.getClass().getName()"],
    "description": "Gets the class name of the variable in the clipboard in Java."
  },  
  "Java Type Comparison": {
    "prefix": ["foolsTypeCompare", "compareTypes"],
    "body": [
      "// Check if two variables have the same type:",
      "if (${1:variable1}.getClass() == ${2:variable2}.getClass()) {",
      "  // Your code here",
      "}"
    ],
    "description": "Compares the types of two variables in Java."
  },
  "Java Type Conversion": {
    "prefix": ["foolsTypeCast", "convert", "cast"],
    "body": [
      "// Java Type Conversion:",
      "",
      "// Implicit conversions (compiler performs automatically):",
      "// - Smaller numeric types to larger numeric types (e.g., int to double).",
      "",
      "// Explicit conversions (using casts):",
      "// - (Type)variable  // C-style cast",
      "",
      "// Conversion methods:",
      "// - Integer.parseInt(string)  // Converts string to int",
      "// - Double.parseDouble(string)  // Converts string to double",
      "// - ... (Various conversion methods in wrapper classes and other packages)",
      "",
      "// Note:",
      "// - Be cautious with explicit conversions, as they can lead to data loss or errors if the conversion is not valid."
    ],
    "description": "Explains type conversion in Java."
  },
  "Java Types": {
    "prefix": ["foolsTypes", "types", "allTypes", "languageTypes", "builtInTypes", "dataTypes"],
    "body": [
      "$BLOCK_COMMENT_START",
      "Java is a statically typed language.",
      "",
      "Types in Java include:",
      "- int: Integer",
      "- float: Single-precision floating-point number",
      "- double: Double-precision floating-point number",
      "- char: Character",
      "- boolean: Boolean",
      "- String: String",
      "- int[]: Array of integers",
      "- ArrayList<Integer>: List of integers",
      "- HashMap<K, V>: Map with key type K and value type V",
      "- MyCustomClass: Custom class with named fields",
      "- enum MyEnum: Enumeration type",
      "- void: Type representing the absence of a value",
      "- Object: Base type of all other types",
      "- List<T>: Interface for lists in the Collections framework",
      "- Set<T>: Interface for sets in the Collections framework",
      "- Map<K, V>: Interface for maps in the Collections framework",
      "$BLOCK_COMMENT_END"
    ],
    "description": "Lists the types in Java."
  },
  "Java String Type": {
    "prefix": ["foolsTypesString", "stringType", "typeString", "textType", "typeText"],
    "body": ["String"],
    "description": "The Java String type."
  },
  "Java Integer Type": {
    "prefix": ["foolsTypesInt", "intType", "typeInt"],
    "body": ["int"],
    "description": "The Java int type."
  },
  "Java Double Type": {
    "prefix": ["foolsTypesNum", "numberType", "typeNumber", "doubleType", "typeDouble"],
    "body": ["double"],
    "description": "The Java double type."
  },
  "Java Float Type": {
    "prefix": ["foolsTypesNumAlt", "floatType", "typeFloat"],
    "body": ["float"],
    "description": "The Java float type."
  },
  "Java Boolean Type": {
    "prefix": ["foolsTypesBool", "booleanType", "typeBool"],
    "body": ["boolean"],
    "description": "The Java boolean type."
  },
  "Java Boolean True": {
    "prefix": ["foolsTypesBoolTrue", "true", "booleanTrue", "on"],
    "body": ["true"],
    "description": "The Java true value."
  },
  "Java Boolean False": {
    "prefix": ["foolsTypesBoolFalse", "false", "off", "booleanFalse"],
    "body": ["false"],
    "description": "The Java false value."
  },
  "Java Date Type": {
    "prefix": ["foolsTypesDate", "dateType", "typeDate", "timeType", "timestampType", "dateTimeType"],
    "body": ["import java.time.LocalDate;"],
    "description": "The Java LocalDate class from the java.time package."
  },
  "Java Map Type": {
    "prefix": ["foolsTypesMap", "mapType", "typeMap", "hashmapType", "structType", "dictType", "typeDict", "typeScruct"],
    "body": ["Map<${1:keyType}, ${2:valueType}>"],
    "description": "The Java Map type."
  },
  "Java List Type": {
    "prefix": ["foolsTypesList", "listType", "typeList", "typeArray"],
    "body": ["List<${1:type}>"],
    "description": "The Java List type."
  },
  "Java Null Type": {
    "prefix": ["foolsTypesNull", "nullType", "typesNull"],
    "body": ["null"],
    "description": "The Java null value."
  },
  "Java Dynamic Type": {
    "prefix": ["foolsTypesDynamic", "typesDynamic", "typesAny", "dynamicType", "anyType"],
    "body": ["Object"],
    "description": "The Java Object type."
  },
  "Java Date Now": {
    "prefix": ["foolsNow", "now", "currentTime", "dateNow"],
    "body": [
      "import java.time.LocalDate;",
      "",
      "LocalDate now = LocalDate.now();"
    ],
    "description": "Gets the current date in Java."
  },
  "Java Interpolate String": {
    "prefix": ["foolsInterpolate", "interpolate", "variableExpansion", "variableSubstitution", "stringPlaceholders", "stringInterpolation"],
    "body": ["String.format(\"${1:%s}\", ${2:value})"],
    "description": "Interpolates a string in Java."
  },
  "Java Concatenate String": {
    "prefix": ["foolsConcat", "concatenate", "combine"],
    "body": ["${1:\"String1\"} + ${2:\"String2\"}"],
    "description": "Concatenates two strings in Java."
  },
  "Java Create Variable": {
    "prefix": ["foolsVar", "variable", "createVariable", "newVariable"],
    "body": ["${1:Type} ${2:myVar} = ${3:value};"],
    "description": "Creates a variable in Java."
  },
  "Variable Declaration Syntax": {
    "prefix": ["foolsVarSyntax", "variableSyntax", "howToVariables", "letSyntax"],
    "body": [
      "// Java Variable Declaration Syntax:",
      "",
      "// - type: (Scope: Block or Class)",
      "//   - Explicitly specify the variable's type.",
      "//   - Can be declared without initialization (default value is assigned).",
      "",
      "// - final: (Scope: Block or Class)",
      "//   - Cannot be reassigned after initialization.",
      "//   - Use for values that should remain constant.",
      "",
      "// Note:",
      "// - Java does not have a direct equivalent to 'var' or 'let'.",
      "// - Use explicit type declaration for all variables.",
      "// - Use 'final' for values that should not change."
    ],
    "description": "Explains Java variable declaration syntax"
  },
  "Java Create Typed Variable": {
    "prefix": ["foolsVarTyped", "typedVariable", "variableWithType"],
    "body": ["${1:Type} ${2:myVar} = $3;"],
    "description": "Creates a typed variable in Java."
  },
  "Java Create Nullable Variable": {
    "prefix": ["foolsVarNullable", "variableNullable", "nullableVariable", "nil", "none", "nothing", "null", "option"],
    "body": ["${1:Type} ${2:myVar} = null;"],
    "description": "Creates a nullable variable in Java."
  },
  "Java Create String Variable": {
    "prefix": ["foolsVarString", "string", "stringVariable", "variableString", "text", "createString", "createText"],
    "body": ["String ${1:myString} = ${2:'Your string here'};"],
    "description": "Creates a string variable in Java."
  },
  "Java Create Multi-Line String Variable": {
    "prefix": ["foolsVarMultiString", "multiString", "variableMultiString", "multiStringVariable", "multilineText"],
    "body": [
      "String ${1:myString} =",
      "    \"${2:Line 1}\" +",
      "    \"\\n${3:Line 2}\" +",
      "    \"\\n${4:Line 3}\";"
    ],
    "description": "Creates a multi-line string variable in Java."
  },
  "Java Create Integer Variable": {
    "prefix": ["foolsVarInt", "integer", "int", "variableInt", "intVariable", "createInt"],
    "body": ["int ${1:myInt} = ${2:0};"],
    "description": "Creates an integer variable in Java."
  },
  "Java Create Double Variable": {
    "prefix": ["foolsVarDouble", "double", "doubleVariable", "variableDouble", "createDouble"],
    "body": ["double ${1:myDouble} = ${2:0.0};"],
    "description": "Creates a double variable in Java."
  },
  "Java Create Boolean Variable": {
    "prefix": ["foolsVarBool", "variableBool", "bool", "boolVariable", "createBool"],
    "body": ["boolean ${1:myBool} = ${2:true};"],
    "description": "Creates a boolean variable in Java."
  },
  "Java Create Date Variable": {
    "prefix": ["foolsVarDate", "dateVariable", "variableDate", "date"],
    "body": [
      "import java.time.LocalDate;",
      "",
      "LocalDate ${1:myDate} = LocalDate.of(${2:year}, ${3:month}, ${4:day});"
    ],
    "description": "Creates a date variable in Java."
  },
  "Java Create List Variable": {
    "prefix": ["foolsVarList", "createList", "listVariable", "arrayVariable", "variableList", "variableArray", "list", "array"],
    "body": [
      "List<${1:Type}> ${2:myList} = new ArrayList<>();",
      "${2:myList}.add(${3:value});"
    ],
    "description": "Creates a list variable in Java."
  },
  "Java Create Map Variable": {
    "prefix": ["foolsVarMap", "createMap", "createStruct", "variableMap", "variableStruct", "mapVariable", "structVariable", "dictVariable", "variableDict", "createDict"],
    "body": [
      "Map<${1:Key}, ${2:Value}> ${3:myMap} = new HashMap<>();",
      "${3:myMap}.put(${4:key}, ${5:value});"
    ],
    "description": "Creates a map variable in Java."
  },
  "Java Create Constant": {
    "prefix": ["foolsConst", "constant"],
    "body": ["final ${1:Type} ${2:myConst} = ${3:value};"],
    "description": "Creates a constant variable in Java."
  },
  "Java Static Variable": {
    "prefix": ["foolsVarStatic", "staticVariable", "associatedConstant"],
    "body": [
      "static ${2:Type} ${3:myStaticVar} = ${4:value};",
      "",
      "// Access the static variable",
      "// MyClass.${3:myStaticVar}"
    ],
    "description": "Creates a static variable in a Java class."
  },
  "Java Generate List": {
    "prefix": ["foolsGenList", "generateList", "listGen"],
    "body": [
      "List<${1:Type}> ${2:myList} = IntStream.range(0, ${3:length}).mapToObj(i -> ${4:value}).collect(Collectors.toList());"
    ],
    "description": "Generates a list of a specific length in Java."
  },
  "Java Generate Map": {
    "prefix": ["foolsGenMap", "generateMap"],
    "body": [
      "Map<${1:Key}, ${2:Value}> ${3:myMap} = IntStream.range(0, ${4:length}).boxed().collect(Collectors.toMap(i -> ${5:key}, i -> ${6:value}));"
    ],
    "description": "Generates a map of a specific length in Java."
  },
  "Java Print": {
   "prefix": ["foolsPrint", "print", "log", "systemOut", "write", "consoleLog"],
    "body": ["System.out.println(${1:'Your message here'});"],
    "description": "Prints a message to the console in Java."
  },
  "Java Print Multi": {
    "prefix": ["foolsPrintMulti", "printMultiLine"],
    "body": [
      "System.out.println(${1:\"Line 1\"} +",
      "    ${2:\"\\nLine 2\"} +",
      "    ${3:\"\\nLine 3\"});"
    ],
    "description": "Prints a multi-line message to the console in Java."
  },
  "Java For Loop": {
    "prefix": ["foolsForLoop", "forLoop", "forX"],
    "body": [
      "for (int ${1:i} = 0; $1 < ${2:10}; $1++) {",
      "  // Your code here",
      "}"
    ],
    "description": "Creates a for loop that iterates through a set of numbers with the index in Java."
  },
  "Java For Each Loop": {
    "prefix": ["foolsForEachLoop", "forEach"],
    "body": [
      "for (${1:Type} ${2:item} : ${3:iterable}) {",
      "  ${4:// Your code here}",
      "}"
    ],
    "description": "Iterates over an iterable object in Java."
  },
  "Java While Loop": {
    "prefix": ["foolsWhileLoop", "whileLoop", "whileTrue"],
    "body": ["while (${1:condition}) {", "  ${2:// Your code here}", "}"],
    "description": "Creates a while loop in Java."
  },
  "Java Do While Loop": {
    "prefix": ["foolsDoWhileLoop", "doWhile"],
    "body": ["do {", "  ${1:// Your code here}", "} while (${2:condition});"],
    "description": "Creates a do...while loop in Java."
  },
  "Java Switch Statement": {
    "prefix": ["foolsSwitch", "switch", "switchStatement", "select", "case", "when"],
    "body": [
      "switch (${1:variable}) {",
      "  case ${2:value1}:",
      "    ${3:// Your code here}",
      "    break;",
      "  case ${4:value2}:",
      "    ${5:// Your code here}",
      "    break;",
      "  default:",
      "    ${6:// Your code here}",
      "}"
    ],
    "description": "Creates a switch statement in Java."
  },
  "Java Function": {
    "prefix": ["foolsFunc", "function", "subprogram", "procedure", "subroutine", "method"],
    "body": [
      "public ${1:void} ${2:myFunction}(${3:}) {",
      "    ${4:// Your code here}",
      "}"
    ],
    "description": "Creates a function in Java."
  },
  "Java Function Args": {
    "prefix": ["foolsFuncArgs", "functionArgs", "functionWithArgs"],
    "body": [
      "// In Java, functions do not support default argument values in definitions.",
      "// You can achieve similar functionality using method overloading.",
      "public ${1:void} ${2:myFunction}(${3:type1} ${4:arg1}, ${5:type2} ${6:arg2}) {",
      "    ${7:// Your code here}",
      "}",
      "",
      "// Overloaded method with default value for arg2",
      "public ${1:void} ${2:myFunction}(${3:type1} ${4:arg1}) {",
      "    ${5:type2} ${6:arg2} = ${8:defaultValue};",
      "    ${2:myFunction}(${4:arg1}, ${6:arg2});",
      "}"
    ],
    "description": "Creates a function with arguments in Java, with a note about default argument values."
  },
  "Java Function Named Args": {
    "prefix": ["foolsFuncArgsNamed", "functionNamedArgs"],
    "body": [
      "// Note: Java does not support named arguments in function definitions."
    ],
    "description": "Note about named arguments in Java."
  },
  "Java Arrow Function": {
    "prefix": ["foolsFuncArrow", "arrowFunction", "functionArrow"],
    "body": [
      "(${2:parameters}) -> ${1:returnType} {",
      "    ${3:// Your code here}",
      "}"
    ],
    "description": "Creates an arrow function (lambda) in Java."
  },
  "Java Anonymous Function": {
    "prefix": ["foolsFuncAnon", "anonFunc", "anonymous", "closure" ,"lambda", "functionLiteral", "foolsFuncLambda"],
    "body": [
      "new ${1:InterfaceName}() {",
      "    @Override",
      "    public ${2:returnType} ${3:methodName}(${4:parameters}) {",
      "        ${5:// Your code here}",
      "    }",
      "}"
    ],
    "description": "Creates an anonymous function (anonymous inner class) in Java."
  },
  "Java Lambda Function": {
    "prefix": ["foolsFuncLambda", "foolsLambda"],
    "body": ["(${1:parameters}) -> ${2:expression}"],
    "description": "Creates a lambda function in Java."
  },
  "Java Function Syntax": {
    "prefix": ["foolsFuncSyntax", "functionSyntax", "functionDocs"],
    "body": [
      "// Java Function Syntax",
      "// Basic function: public returnType functionName(parameters) { ... }",
      "// Function with arguments: public returnType functionName(argType argName, ...) { ... }",
      "// Note: Java does not support named arguments in function definitions."
    ],
    "description": "Outlines the syntax for functions in Java."
  },
  "Java Comment": {
    "prefix": ["foolsComment", "comment", "note"],
    "body": ["// ${1:Your comment here}"],
    "description": "Creates a single-line comment in Java."
  },
  "Java Multi-Line Comment": {
    "prefix": ["foolsCommentMulti", "multiLineComment", "commentMultiLine", "blockComment"],
    "body": ["/*", " * ${1:Your comment here}", " */"],
    "description": "Creates a multi-line comment in Java."
  },
  "Java Throw Exception": {
    "prefix": ["foolsThrow", "throwError", "throwException"],
    "body": ["throw new ${1:Exception}(${2:'Your message here'});"],
    "description": "Throws an exception in Java."
  },
  "Java Try Catch": {
    "prefix": ["foolsTryCatch", "tryCatch"],
    "body": [
      "try {",
      "  ${1:// Your code here}",
      "} catch (${2:Exception} ${3:e}) {",
      "  ${4:// Your code here}",
      "}"
    ],
    "description": "Creates a try...catch block in Java."
  },
  "Java Enum": {
    "prefix": ["foolsEnum", "enum"],
    "body": [
      "enum ${1:MyEnum} {",
      "  ${2:value1},",
      "  ${3:value2},",
      "  // Add more values here",
      "}"
    ],
    "description": "Creates an enum in Java."
  },
  "Java Class": {
    "prefix": ["foolsClass", "class", "objectTemplate"],
    "body": ["public class ${1:MyClass} {", "  ${2:// Your code here}", "}"],
    "description": "Creates a class in Java."
  },
  "Java If Statement": {
    "prefix": ["foolsIf", "ifStatement"],
    "body": ["if (${1:condition}) {", "  ${2:// Your code here}", "}"],
    "description": "Creates an if statement in Java."
  },
  "Java If Else Statement": {
    "prefix": ["foolsIfElse", "ifElseStatement"],
    "body": [
      "if (${1:condition}) {",
      "  ${2:// Your code here}",
      "} else if (${3:condition}) {",
      "  ${4:// Your code here}",
      "} else {",
      "  ${5:// Your code here}",
      "}"
    ],
    "description": "Creates an if...else statement in Java."
  },
  "Java Ternary Operator": {
    "prefix": ["foolsTernary", "ternary", "conditionalOperator"],
    "body": ["${1:condition} ? ${2:trueValue} : ${3:falseValue}"],
    "description": "Creates a ternary operator in Java."
  }
}
