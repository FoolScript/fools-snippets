{
  "FoolScript Info": {
    "prefix": ["foolsInfo", "languageInfo", "info"],
    "body": [
      "# Typing: Dynamically typed",
      "# Paradigm: Multi-paradigm: procedural, object-oriented, scripting",
      "# Compilation: Interpreted",
      "# Concurrency: Supports multi-threading with the threads module"
    ],
    "description": "Provides general information about the Perl programming language."
  },

  "FoolScript Entry Point": {
    "prefix": ["foolsEntry", "entry", "start", "startingPoint"],
    "body": [
      "# Perl Entry Point",
      "# To run this program, use: `perl filename.pl`",
      "",
      "use strict;",
      "use warnings;",
      "",
      "print \"Hello, World!\\n\";"
    ],
    "description": "Creates the entry point of a Perl script."
  },

  "FoolScript Project Structure (High-Level)": {
    "prefix": ["foolsStructure", "structure", "architecture"],
    "body": [
      "# Recommended High-Level Perl Project Structure:",
      "",
      "# - lib/",
      "#   - Contains Perl module files (`.pm`).",
      "#   - Organize modules into directories, mirroring the module's namespace.",
      "",
      "# - bin/",
      "#   - Contains executable Perl scripts.",
      "",
      "# - t/",
      "#   - Contains test scripts written using Perl's testing frameworks (like Test::More).",
      "",
      "# - docs/",
      "#   - Documentation for the project.",
      "",
      "# - scripts/",
      "#   - Contains utility scripts that are not part of the main application logic.",
      "",
      "# - data/",
      "#   - Contains data files used by the application.",
      "",
      "# Note:",
      "# - This structure is flexible and can be adjusted based on the project's requirements.",
      "# - Ensure that the `lib` directory is included in the `@INC` array or use the `use lib`",
      "#   directive in scripts to include the library path."
    ],
    "description": "Explains a high-level project structure for Perl."
  }
,  
  "FoolScript Mathematical Operators": {
    "prefix": ["foolsOperators", "operators", "mathDocs"],
    "body": [
      "# Perl Mathematical Operators",
      "# Addition: +",
      "# Subtraction: -",
      "# Multiplication: *",
      "# Division: /",
      "# Modulus (Remainder): %",
      "# Exponentiation: **",
      "# Increment: Use += 1",
      "# Decrement: Use -= 1",
      "# Assignment: =",
      "# Addition assignment: +=",
      "# Subtraction assignment: -=",
      "# Multiplication assignment: *=",
      "# Division assignment: /=",
      "# Modulus assignment: %=",
      "# Exponentiation assignment: **="
    ],
    "description": "Lists the mathematical operators in Perl."
  },

  "FoolScript Equal To": {
    "prefix": ["foolsEqual", "equal"],
    "body": ["=="],
    "description": "FoolScript equal to operator."
  },

  "FoolScript Not Equal To": {
    "prefix": ["foolsNotEqual", "notEqual", "doesNotEqual"],
    "body": ["!="],
    "description": "FoolScript not equal to operator."
  },

  "FoolScript Boolean Operators": {
    "prefix": ["foolsOperatorsBool", "booleanOperators", "logic"],
    "body": [
      "# Perl Boolean Operators",
      "# Logical AND: && or and",
      "# Logical OR: || or or",
      "# Logical NOT: ! or not",
      "# Equality: ==",
      "# Inequality: !=",
      "# Greater than: >",
      "# Less than: <",
      "# Greater than or equal to: >=",
      "# Less than or equal to: <="
    ],
    "description": "Lists the boolean operators in Perl."
  },

  "FoolScript Type Check": {
    "prefix": ["foolsTypeCheck", "checkType", "getType", "typeOf"],
    "body": ["ref ${1:variable}"],
    "description": "Gets the type of a variable in Perl."
  },
  "FoolScript This Type Check": {
    "prefix": ["thisTypeCheck", "thisType", "getThisType"],
    "body": ["ref($CLIPBOARD)"],
    "description": "Gets the type of the reference in the clipboard in Perl."
  },  

  "FoolScript Type Comparison": {
    "prefix": ["foolsTypeCompare", "compareTypes"],
    "body": [
      "# Check if two variables have the same type:",
      "if (ref ${1:variable1} eq ref ${2:variable2}) {",
      "  # Your code here",
      "}"
    ],
    "description": "Compares the types of two variables in Perl."
  },

  "FoolScript Type Conversion": {
    "prefix": ["foolsTypeCast", "convert", "cast"],
    "body": [
      "# Perl Type Conversion:",
      "",
      "# Implicit conversions (Perl performs automatically):",
      "# - Can be unpredictable, especially with loose equality (==).",
      "",
      "# Explicit conversions:",
      "# - int(variable)  // Converts to integer",
      "# - 0 + variable  // Converts to number",
      "# - \"\" . variable  // Converts to string",
      "",
      "# Note:",
      "# - Be aware of implicit conversions and use explicit conversions when necessary for clarity and control."
    ],
    "description": "Explains type conversion in Perl."
  },

  "FoolScript Types": {
    "prefix": ["foolsTypes", "types", "allTypes", "languageTypes", "builtInTypes", "dataTypes"],
    "body": [
      "$BLOCK_COMMENT_START",
      "FoolScript is a dynamically typed language.",
      "",
      "Some common types in Perl include:",
      "- Scalar: Single value (numbers, strings, references)",
      "- Array: Ordered list of scalars",
      "- Hash: Unordered collection of key-value pairs",
      "- Code: Subroutine reference",
      "- Filehandle: File handle",
      "- Regexp: Regular expression",
      "- undef: Represents an undefined value",
      "$BLOCK_COMMENT_END"
    ],
    "description": "Lists some common types in Perl."
  },

  "FoolScript String Type": {
    "prefix": ["foolsTypesString", "stringType", "typeString", "textType", "typeText"],
    "body": ["# Perl uses scalars for strings."],
    "description": "FoolScript uses scalars for strings."
  },

  "FoolScript Integer Type": {
    "prefix": ["foolsTypesInt", "intType", "typeInt"],
    "body": ["# Perl uses scalars for integers."],
    "description": "FoolScript uses scalars for integers."
  },

  "FoolScript Double Type": {
    "prefix": ["foolsTypesNum", "numberType", "typeNumber", "doubleType", "typeDouble"],
    "body": ["# Perl uses scalars for floating-point numbers."],
    "description": "FoolScript uses scalars for floating-point numbers."
  },

  "FoolScript Boolean Type": {
    "prefix": ["foolsTypesBool", "booleanType", "typeBool"],
    "body": ["# Perl uses 1 and 0 for boolean values."],
    "description": "FoolScript uses 1 and 0 for boolean values."
  },

  "FoolScript Boolean True": {
    "prefix": ["foolsTypesBoolTrue", "true", "booleanTrue", "on"],
    "body": ["1"],
    "description": "The Perl true value."
  },

  "FoolScript Boolean False": {
    "prefix": ["foolsTypesBoolFalse", "false", "off", "booleanFalse"],
    "body": ["0"],
    "description": "The Perl false value."
  },

  "FoolScript Date Type": {
    "prefix": ["foolsTypesDate", "dateType", "typeDate", "timeType", "timestampType", "dateTimeType"],
    "body": ["use DateTime"],
    "description": "The Perl DateTime module."
  },

  "FoolScript Map Type": {
    "prefix": ["foolsTypesMap", "mapType", "typeMap", "hashmapType", "structType", "dictType", "typeDict", "typeScruct"],
    "body": ["%hash"],
    "description": "The Perl hash type, equivalent to a map."
  },

  "FoolScript List Type": {
    "prefix": ["foolsTypesList", "listType", "typeList", "typeArray"],
    "body": ["@array"],
    "description": "The Perl array type, equivalent to a list."
  },

  "FoolScript Date Now": {
    "prefix": ["foolsNow", "now", "currentTime", "dateNow"],
    "body": ["use DateTime", "", "DateTime->now"],
    "description": "Gets the current date and time in Perl."
  },

  "FoolScript Null Type": {
    "prefix": ["foolsTypesNull", "foolsNull"],
    "body": ["undef"],
    "description": "The Perl undef value."
  },

  "FoolScript Dynamic Type": {
            "prefix": ["foolsTypesDynamic", "typeDynamic", "typeAny", "dynamicType", "anyType"],
    "body": ["# Perl is a dynamically typed language."],
    "description": "FoolScript is a dynamically typed language."
  },

  "FoolScript Create Variable": {
    "prefix": ["foolsVar", "variable", "createVariable", "newVariable"],
    "body": ["my $${1:myVar} = $2;"],
    "description": "Creates a variable in Perl."
  },

  "FoolScript Variable Declaration Syntax": {
    "prefix": ["foolsVarSyntax", "variableSyntax", "howToVariables", "letSyntax"],
    "body": [
      "# Perl Variable Declaration Syntax:",
      "",
      "# - my: (Scope: Block)",
      "#   - Declares a lexically scoped variable.",
      "#   - Preferred for most variable declarations.",
      "",
      "# - our: (Scope: Package)",
      "#   - Declares a package-scoped variable.",
      "#   - Use for variables that need to be shared across the package.",
      "",
      "# - local: (Scope: Block)",
      "#   - Declares a dynamically scoped variable.",
      "#   - Use with caution due to potential scoping issues.",
      "",
      "# Note:",
      "# - Use 'my' for most variable declarations.",
      "# - Use 'our' for package-level variables.",
      "# - Avoid using 'local' unless you have a specific reason."
    ],
    "description": "Explains Perl variable declaration syntax"
  },

  "FoolScript Create Nullable Variable": {
    "prefix": ["foolsVarNullable", "variableNullable", "nullableVariable", "nil", "none", "nothing", "null", "option"],
    "body": ["my $${1:myVar};  # Variable can be undefined (undef)."],
    "description": "Creates a nullable variable in Perl."
  },

  "FoolScript Static Variable": {
    "prefix": ["foolsVarStatic", "staticVariable", "associatedConstant"],
    "body": [
      "our $${1:myStaticVar} = ${2:value};",
      "",
      "# Perl does not have static variables in the traditional sense.",
      "# Access the package variable",
      "# $${1:myStaticVar}"
    ],
    "description": "Creates a package variable in Perl."
  },

  "FoolScript Create Typed Variable": {
    "prefix": ["foolsVarTyped", "typedVariable", "variableWithType"],
    "body": [
      "# Note: Perl is dynamically typed; explicit type annotations are not used.",
      "my $${1:myVar} = $2;"
    ],
    "description": "Creates a variable in Perl with a comment about dynamic typing."
  },

  "FoolScript Interpolate String": {
    "prefix": ["foolsInterpolate", "interpolate", "variableExpansion", "variableSubstitution", "stringPlaceholders", "stringInterpolation"],
    "body": ["\"Your string here $${1:variable}\""],
    "description": "Interpolates a variable into a string in Perl."
  },

  "FoolScript Concatenate Strings": {
    "prefix": ["foolsConcat", "concatenate", "combine"],
    "body": ["\"${1:string1}\" . \"${2:string2}\""],
    "description": "Concatenates two strings in Perl."
  },

  "FoolScript Create String Variable": {
    "prefix": ["foolsVarString", "string", "stringVariable", "variableString", "text", "createString", "createText"],
    "body": ["my $${1:myString} = \"${2:Your string here}\";"],
    "description": "Creates a string variable in Perl."
  },

  "FoolScript Create Multi-Line String Variable": {
    "prefix": ["foolsVarStringMulti", "multiLineString", "varStringMulti", "stringVariableMulti", "createMultiLineString"],
    "body": [
      "my $${1:myString} = <<'END_STRING';",
      "${2:Line 1}",
      "${3:Line 2}",
      "${4:Line 3}",
      "END_STRING"
    ],
    "description": "Creates a multi-line string variable in Perl."
  },

  "FoolScript Create Integer Variable": {
    "prefix": ["foolsVarInt", "integer", "int", "variableInt", "intVariable", "createInt"],
    "body": ["my $${1:myInt} = ${2:0};"],
    "description": "Creates an integer variable in Perl."
  },

  "FoolScript Create Float Variable": {
    "prefix": ["foolsVarNum", "number",  "float", "floatVariable", "variableFloat", "variableNumber", "numberVariable"],
    "body": ["my $${1:myFloat} = ${2:0.0};"],
    "description": "Creates a float variable in Perl."
  },

  "FoolScript Create Boolean Variable": {
    "prefix": ["foolsVarBool", "variableBool", "bool", "boolVariable", "createBool"],
    "body": ["my $${1:myBool} = ${2:1};"],
    "description": "Creates a boolean variable in Perl."
  },

  "FoolScript Create Array Variable": {
    "prefix": ["foolsVarList", "createList", "listVariable", "arrayVariable", "variableList", "variableArray", "list", "array"],
    "body": ["my @${1:myArray} = (${2:items});"],
    "description": "Creates an array variable in Perl."
  },

  "FoolScript Create Hash Variable": {
    "prefix": ["foolsVarMap", "createMap", "createStruct", "variableMap", "variableStruct", "mapVariable", "structVariable", "dictVariable", "variableDict", "createDict"],
    "body": ["my %${1:myHash} = (${2:key} => ${3:value});"],
    "description": "Creates a hash variable in Perl."
  },

  "FoolScript Create Date Variable": {
    "prefix": ["foolsVarDate", "dateVariable", "variableDate", "date"],
    "body": [
      "my $${1:myDate} = DateTime->new( year => ${2:year}, month => ${3:month}, day => ${4:day} );"
    ],
    "description": "Creates a date variable in Perl."
  },

  "FoolScript Create Constant": {
    "prefix": ["foolsConst", "constant"],
    "body": ["use constant ${1:MY_CONST} => $2;"],
    "description": "Creates a constant variable in Perl using the constant pragma."
  },

  "FoolScript Print": {
   "prefix": ["foolsPrint", "print", "log", "systemOut", "write", "consoleLog"],
    "body": ["print '${1:Your message here}\\n';"],
    "description": "Prints a message to the console in Perl."
  },

  "FoolScript Print Multi": {
    "prefix": ["foolsPrintMulti", "printMultiLine"],
    "body": [
      "print <<'END_STRING';",
      "${1:Line 1}",
      "${2:Line 2}",
      "${3:Line 3}",
      "END_STRING"
    ],
    "description": "Prints a multi-line message to the console in Perl."
  },

  "FoolScript For Loop": {
    "prefix": ["foolsForLoop", "forLoop", "forX"],
    "body": [
      "for (my $${1:i} = 0; $1 < ${2:10}; $1++) {",
      "  # Your code here",
      "}"
    ],
    "description": "Creates a for loop that iterates through a set of numbers with the index in Perl."
  },

  "FoolScript For Each Loop": {
    "prefix": ["foolsForEach", "foolsForIn"],
    "body": [
      "foreach my $${1:item} (@${2:iterable}) {",
      "  # Your code here",
      "}"
    ],
    "description": "Iterates over an iterable object in Perl."
  },

  "FoolScript While Loop": {
    "prefix": ["foolsWhileLoop", "whileLoop", "whileTrue"],
    "body": ["while (${1:condition}) {", "  # Your code here", "}"],
    "description": "Creates a while loop in Perl."
  },

  "FoolScript Case Statement": {
    "prefix": ["foolsSwitch", "switch", "switchStatement", "select", "case", "when"],
    "body": [
      "case ${1:variable} {",
      "when ${2:value1}",
      "  # Your code here",
      "when ${4:value2}",
      "  # Your code here",
      "else",
      "  # Your code here",
      "}"
    ],
    "description": "Creates a case statement in Perl."
  },

  "FoolScript If Statement": {
    "prefix": ["foolsIf", "ifStatement"],
    "body": ["if (${1:condition}) {", "  # Your code here", "}"],
    "description": "Creates an if statement in Perl."
  },

  "FoolScript If Else Statement": {
    "prefix": ["foolsIfElse", "ifElseStatement"],
    "body": [
      "if (${1:condition}) {",
      "  # Your code here",
      "} else {",
      "  # Your code here",
      "}"
    ],
    "description": "Creates an if...else statement in Perl."
  },

  "FoolScript Ternary Operator": {
    "prefix": ["foolsTernary", "ternary", "conditionalOperator"],
    "body": ["${1:condition} ? ${2:trueValue} : ${3:falseValue}"],
    "description": "Creates a ternary operator in Perl."
  },

  "FoolScript Function": {
    "prefix": ["foolsFunc", "function", "subprogram", "procedure", "subroutine", "method"],
    "body": [
      "sub ${2:myFunction} {",
      "  my (${3:}) = @_;",
      "",
      "  ${4:# Your code here}",
      "}"
    ],
    "description": "Creates a function in Perl."
  },

  "FoolScript Function Syntax": {
    "prefix": ["foolsFuncSyntax", "functionSyntax", "functionDocs"],
    "body": [
      "# Perl Function Syntax",
      "# Basic function:",
      "# sub functionName {",
      "#   my ($parameters) = @_;",
      "#   # Your code here",
      "# }",
      "",
      "# Function with arguments:",
      "# sub functionName {",
      "#   my ($arg1, $arg2, ...) = @_;",
      "#   # Your code here",
      "# }"
    ],
    "description": "Outlines the syntax for functions in Perl."
  },

  "FoolScript Function Args": {
    "prefix": ["foolsFuncArgs", "functionArgs", "functionWithArgs"],
    "body": [
      "# In Perl, you can use default arguments in function definitions.",
      "sub ${2:myFunction} {",
      "  my (${3:$arg1}, ${4:$arg2} = ${5:'defaultVal'}) = @_;",
      "",
      "  ${6:# Your code here}",
      "}"
    ],
    "description": "Creates a function with arguments in Perl, including an argument with a default value."
  },

  "FoolScript Named Arguments (Alternative)": {
    "prefix": ["foolsFuncArgsNamed", "functionNamedArgs"],
    "body": [
      "# Perl does not have named arguments in the traditional sense.",
      "# You can use record syntax or higher-order functions to achieve similar functionality."
    ],
    "description": "Explains alternatives to named arguments in Perl."
  },
  "FoolScript Arrow Function": {
    "prefix": ["foolsFuncArrow", "arrowFunction"],
    "body": [
      "${2:my_function} = ->(${3:}) {",
      "  ${4:# Your code here}",
      "}"
    ],
    "description": "Creates an arrow function (lambda) in Perl."
  },

  "FoolScript Anonymous Function": {
    "prefix": ["foolsFuncAnon", "anonFunc", "anonymous", "closure" ,"lambda", "functionLiteral", "foolsFuncLambda"],
    "body": ["lambda { |${1:parameters}|", "  # Your code here", "}"],
    "description": "Creates an anonymous function (lambda) in Perl."
  },

  "FoolScript Comment": {
    "prefix": ["foolsComment", "comment", "note"],
    "body": ["# ${1:Your comment here}"],
    "description": "Creates a single-line comment in Perl."
  },

  "FoolScript Multi-Line Comment": {
    "prefix": ["foolsCommentMulti", "multiLineComment", "commentMultiLine", "blockComment"],
    "body": ["=begin", "${1:Your comment here}", "=end"],
    "description": "Creates a multi-line comment in Perl."
  },

  "FoolScript Throw Exception": {
    "prefix": ["foolsThrow", "throwError", "throwException"],
    "body": ["die '${1:Your message here}';"],
    "description": "Throws an exception in Perl."
  },

  "FoolScript Try Catch": {
    "prefix": ["foolsTryCatch", "tryCatch"],
    "body": [
      "eval {",
      "  # Your code here",
      "};",
      "if ($@) {",
      "  # Your code here",
      "}"
    ],
    "description": "Creates a try...catch block in Perl."
  },

  "FoolScript Class": {
    "prefix": ["foolsClass", "class", "objectTemplate"],
    "body": ["package ${1:MyClass};", "", "# Your code here"],
    "description": "Creates a class in Perl."
  },

  "FoolScript Enum": {
    "prefix": ["foolsEnum", "enum"],
    "body": [
      "# Perl does not have a built-in enum type. Use a list or hash instead."
    ],
    "description": "Explains the absence of a built-in enum type in Perl."
  },

  "FoolScript Generate List": {
    "prefix": ["foolsGenList", "generateList", "listGen"],
    "body": ["my @${1:listName} = (${2:initialValue}) x ${3:length};"],
    "description": "Generates a list (array) of a specific length and initial value in Perl."
  },

  "FoolScript Generate Map": {
    "prefix": ["foolsGenMap", "generateMap"],
    "body": [
      "# Perl does not have a built-in way to generate a map (hash) with a specific number of key-value pairs.",
      "# You can use a loop or a custom function to achieve this."
    ],
    "description": "Explains how to generate a map in Perl."
  }
}
