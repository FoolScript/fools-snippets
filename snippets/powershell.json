{
  "FoolScript Info": {
    "prefix": ["foolsInfo", "languageInfo", "info"],
    "body": [
      "# Typing: Dynamically typed",
      "# Paradigm: Object-oriented, imperative, scripting",
      "# Compilation: Interpreted",
      "# Concurrency: Supports multi-threading with the System.Threading namespace"
    ],
    "description": "Provides general information about the PowerShell scripting language."
  },

  "FoolScript Entry Point": {
    "prefix": ["foolsEntry", "entry", "start", "startingPoint"],
    "body": [
      "# PowerShell Entry Point",
      "# To run this script, use: `powershell filename.ps1`",
      "",
      "Write-Host 'Hello, World!'"
    ],
    "description": "Creates the entry point of a PowerShell script."
  },

  "FoolScript Mathematical Operators": {
    "prefix": ["foolsOperators", "operators", "mathDocs"],
    "body": [
      "# PowerShell Mathematical Operators",
      "# Addition: +",
      "# Subtraction: -",
      "# Multiplication: *",
      "# Division: /",
      "# Modulus (Remainder): %",
      "# Exponentiation: Not directly supported, use [Math]::Pow(base, exponent)",
      "# Increment: Use += 1",
      "# Decrement: Use -= 1",
      "# Assignment: =",
      "# Addition assignment: +=",
      "# Subtraction assignment: -=",
      "# Multiplication assignment: *=",
      "# Division assignment: /=",
      "# Modulus assignment: %="
    ],
    "description": "Lists the mathematical operators in PowerShell."
  },

  "FoolScript Equal To": {
    "prefix": ["foolsEqual", "equal"],
    "body": ["-eq"],
    "description": "FoolScript equal to operator."
  },

  "FoolScript Not Equal To": {
    "prefix": ["foolsNotEqual", "notEqual", "doesNotEqual"],
    "body": ["-ne"],
    "description": "FoolScript not equal to operator."
  },

  "FoolScript Boolean Operators": {
    "prefix": ["foolsOperatorsBool", "booleanOperators", "logic"],
    "body": [
      "# PowerShell Boolean Operators",
      "# Logical AND: -and",
      "# Logical OR: -or",
      "# Logical NOT: -not",
      "# Equality: -eq",
      "# Inequality: -ne",
      "# Greater than: -gt",
      "# Less than: -lt",
      "# Greater than or equal to: -ge",
      "# Less than or equal to: -le"
    ],
    "description": "Lists the boolean operators in PowerShell."
  },

  "FoolScript Type Check": {
    "prefix": ["foolsTypeCheck", "checkType", "getType", "typeOf"],
    "body": ["${1:variable}.GetType()"],
    "description": "Gets the type of a variable in PowerShell."
  },
  "FoolScript This Type Check": {
    "prefix": ["thisTypeCheck", "thisType", "getThisType"],
    "body": ["$CLIPBOARD.GetType().FullName"],
    "description": "Gets the full type name of the variable in the clipboard in PowerShell."
  },

  "FoolScript Type Comparison": {
    "prefix": ["foolsTypeCompare", "compareTypes"],
    "body": [
      "# Check if two variables have the same type:",
      "if (${1:variable1}.GetType() -eq ${2:variable2}.GetType()) {",
      "  # Your code here",
      "}"
    ],
    "description": "Compares the types of two variables in PowerShell."
  },

  "FoolScript Type Conversion": {
    "prefix": ["foolsTypeCast", "convert", "cast"],
    "body": [
      "# PowerShell Type Conversion:",
      "",
      "# Explicit conversions:",
      "# - [Type]variable  // Type casting (can throw an error if conversion fails)",
      "# - variable.ToString()  // Converts to string",
      "# - [int]variable  // Converts to integer",
      "# - [double]variable  // Converts to double",
      "# - ... (Various conversion methods and type accelerators)",
      "",
      "# Note:",
      "# - Be cautious with type casting, as it can lead to errors if the conversion is not valid."
    ],
    "description": "Explains type conversion in PowerShell."
  },

  "FoolScript Types": {
    "prefix": [
      "foolsTypes",
      "types",
      "allTypes",
      "languageTypes",
      "builtInTypes",
      "dataTypes"
    ],
    "body": [
      "$BLOCK_COMMENT_START",
      "FoolScript is a dynamically typed language.",
      "",
      "Some common types in PowerShell include:",
      "- [int]: Integer",
      "- [double]: Double-precision floating-point number",
      "- [string]: String",
      "- [bool]: Boolean",
      "- [array]: Array",
      "- [hashtable]: Hash table (associative array)",
      "- [datetime]: Date and time",
      "- [PSCustomObject]: Custom object",
      "- [System.Collections.Hashtable]: .NET Hashtable",
      "- [System.Collections.Generic.List[T]]: .NET Generic List",
      "- [System.Management.Automation.PSObject]: PowerShell object",
      "$BLOCK_COMMENT_END"
    ],
    "description": "Lists some common types in PowerShell."
  },

  "FoolScript String Type": {
    "prefix": [
      "foolsTypesString",
      "stringType",
      "typeString",
      "textType",
      "typeText"
    ],
    "body": ["[string]"],
    "description": "The PowerShell string type."
  },

  "FoolScript Integer Type": {
    "prefix": ["foolsTypesInt", "intType", "typeInt"],
    "body": ["[int]"],
    "description": "The PowerShell int type."
  },

  "FoolScript Double Type": {
    "prefix": [
      "foolsTypesNum",
      "number",
      "numberType",
      "typeNumber",
      "double",
      "doubleType",
      "typeDouble"
    ],
    "body": ["[double]"],
    "description": "The PowerShell double type."
  },

  "FoolScript Boolean Type": {
    "prefix": ["foolsTypesBool", "booleanType", "typeBool"],
    "body": ["[bool]"],
    "description": "The PowerShell bool type."
  },

  "FoolScript Boolean True": {
    "prefix": ["foolsTypesBoolTrue", "true", "booleanTrue", "on"],
    "body": ["$true"],
    "description": "The PowerShell true value."
  },

  "FoolScript Boolean False": {
    "prefix": ["foolsTypesBoolFalse", "false", "off", "booleanFalse"],
    "body": ["$false"],
    "description": "The PowerShell false value."
  },

  "FoolScript Date Type": {
    "prefix": [
      "foolsTypesDate",
      "dateType",
      "typeDate",
      "timeType",
      "timestampType",
      "dateTimeType"
    ],
    "body": ["[datetime]"],
    "description": "The PowerShell datetime type."
  },

  "FoolScript Map Type": {
    "prefix": [
      "foolsTypesMap",
      "mapType",
      "typeMap",
      "hashmapType",
      "structType",
      "dictType",
      "typeDict",
      "typeScruct"
    ],
    "body": ["[hashtable]"],
    "description": "The PowerShell hashtable type, equivalent to a map."
  },

  "FoolScript List Type": {
    "prefix": ["foolsTypesList", "listType", "typeList", "typeArray"],
    "body": ["[array]"],
    "description": "The PowerShell array type, equivalent to a list."
  },

  "FoolScript Date Now": {
    "prefix": ["foolsNow", "now", "currentTime", "dateNow"],
    "body": ["Get-Date"],
    "description": "Gets the current date and time in PowerShell."
  },

  "FoolScript Null Type": {
    "prefix": ["foolsTypesNull", "foolsNull"],
    "body": ["$null"],
    "description": "The PowerShell null value."
  },

  "FoolScript Dynamic Type": {
    "prefix": [
      "foolsTypesDynamic",
      "typeDynamic",
      "typeAny",
      "dynamicType",
      "anyType"
    ],
    "body": ["# PowerShell is a dynamically typed language."],
    "description": "FoolScript is a dynamically typed language."
  },

  "FoolScript Create Variable": {
    "prefix": ["foolsVar", "variable", "createVariable", "newVariable"],
    "body": ["$${1:myVar} = $2"],
    "description": "Creates a variable in PowerShell."
  },

  "FoolScript Create Typed Variable": {
    "prefix": ["foolsVarTyped", "typedVariable", "variableWithType"],
    "body": ["[${1:Type}] $${2:myVar} = $3"],
    "description": "Creates a typed variable in PowerShell."
  },

  "FoolScript Create Nullable Variable": {
    "prefix": ["foolsVarNullable", "variableNullable", "nullableVariable", "nil", "none", "nothing", "null", "option"],
    "body": ["$${1:myVar} = $null"],
    "description": "Creates a nullable variable in PowerShell."
  },

  "FoolScript Interpolate String": {
    "prefix": [
      "foolsInterpolate",
      "interpolate",
      "variableExpansion",
      "variableSubstitution",
      "stringPlaceholders",
      "stringInterpolation"
    ],
    "body": ["\"Your string here $${1:variable}\""],
    "description": "Interpolates a variable into a string in PowerShell."
  },

  "FoolScript Concatenate Strings": {
    "prefix": ["foolsConcat", "concatenate", "combine"],
    "body": ["\"${1:string1}\" + \"${2:string2}\""],
    "description": "Concatenates two strings in PowerShell."
  },

  "FoolScript Create String Variable": {
    "prefix": [
      "foolsVarString",
      "string",
      "stringVariable",
      "variableString",
      "text",
      "createString",
      "createText"
    ],
    "body": ["$${1:myString} = \"${2:Your string here}\""],
    "description": "Creates a string variable in PowerShell."
  },

  "FoolScript Create Multi-Line String Variable": {
    "prefix": [
      "foolsVarStringMulti",
      "multiLineString",
      "varStringMulti",
      "stringVariableMulti",
      "createMultiLineString"
    ],
    "body": [
      "$${1:myString} = @\"",
      "${2:Line 1}",
      "${3:Line 2}",
      "${4:Line 3}",
      "\"@;"
    ],
    "description": "Creates a multi-line string variable in PowerShell."
  },

  "FoolScript Create Integer Variable": {
    "prefix": [
      "foolsVarInt",
      "integer",
      "int",
      "variableInt",
      "intVariable",
      "createInt"
    ],
    "body": ["$${1:myInt} = ${2:0}"],
    "description": "Creates an integer variable in PowerShell."
  },

  "FoolScript Create Double Variable": {
    "prefix": [
      "foolsVarNum",
      "number",
      "float",
      "floatVariable",
      "variableFloat",
      "variableNumber",
      "numberVariable"
    ],
    "body": ["$${1:myDouble} = ${2:0.0}"],
    "description": "Creates a double variable in PowerShell."
  },

  "FoolScript Create Boolean Variable": {
    "prefix": [
      "foolsVarBool",
      "variableBool",
      "bool",
      "boolVariable",
      "createBool"
    ],
    "body": ["$${1:myBool} = ${2:$true}"],
    "description": "Creates a boolean variable in PowerShell."
  },

  "FoolScript Create Array Variable": {
    "prefix": [
      "foolsVarList",
      "createList",
      "listVariable",
      "arrayVariable",
      "variableList",
      "variableArray",
      "list",
      "array"
    ],
    "body": ["$${1:myArray} = @(${2:items})"],
    "description": "Creates an array variable in PowerShell."
  },

  "FoolScript Create Hash Table Variable": {
    "prefix": [
      "foolsVarMap",
      "createMap",
      "createStruct",
      "variableMap",
      "variableStruct",
      "mapVariable",
      "structVariable",
      "dictVariable",
      "variableDict",
      "createDict"
    ],
    "body": [
      "$${1:myHashTable} = @{",
      "  ${2:key1} = ${3:value1}",
      "  ${4:key2} = ${5:value2}",
      "  # Add more key-value pairs here",
      "}"
    ],
    "description": "Creates a hash table variable in PowerShell."
  },

  "FoolScript Create Date Variable": {
    "prefix": ["foolsVarDate", "dateVariable", "variableDate", "date"],
    "body": [
      "$${1:myDate} = Get-Date -Year ${2:year} -Month ${3:month} -Day ${4:day}"
    ],
    "description": "Creates a date variable in PowerShell."
  },

  "FoolScript Create Constant": {
    "prefix": ["foolsConst", "constant"],
    "body": ["$${1:myConst} = $2"],
    "description": "Creates a constant variable in PowerShell."
  },

  "FoolScript Print": {
    "prefix": ["foolsPrint", "print", "log", "systemOut", "write", "consoleLog"],
    "body": ["Write-Host ${1:'Your message here'}"],
    "description": "Prints a message to the console in PowerShell."
  },

  "FoolScript Print Multi": {
    "prefix": ["foolsPrintMulti", "printMultiLine"],
    "body": [
      "Write-Host @\"",
      "${1:Line 1}",
      "${2:Line 2}",
      "${3:Line 3}",
      "\"@;"
    ],
    "description": "Prints a multi-line message to the console in PowerShell."
  },

  "FoolScript For Loop": {
    "prefix": ["foolsForLoop"],
    "body": [
      "for ($${1:i} = 0; $1 -lt ${2:10}; $1++) {",
      "  # Your code here",
      "}"
    ],
    "description": "Creates a for loop that iterates through a set of numbers with the index in PowerShell."
  },

  "FoolScript For Each Loop": {
    "prefix": ["foolsForEachLoop", "foolsForIn"],
    "body": [
      "foreach ($${1:item} in ${2:iterable}) {",
      "  # Your code here",
      "}"
    ],
    "description": "Iterates over an iterable object in PowerShell."
  },

  "FoolScript While Loop": {
    "prefix": ["foolsWhileLoop", "whileLoop", "whileTrue"],
    "body": ["while (${1:condition}) {", "  # Your code here", "}"],
    "description": "Creates a while loop in PowerShell."
  },

  "FoolScript Switch Statement": {
    "prefix": ["foolsSwitch", "switch", "switchStatement", "select", "case", "when"],
    "body": [
      "switch (${1:variable}) {",
      "  ${2:value1} {",
      "    # Your code here",
      "    break",
      "  }",
      "  ${3:value2} {",
      "    # Your code here",
      "    break",
      "  }",
      "  default {",
      "    # Your code here",
      "  }",
      "}"
    ],
    "description": "Creates a switch statement in PowerShell."
  },

  "FoolScript Function": {
    "prefix": [
      "foolsFunc",
      "function",
      "subprogram",
      "procedure",
      "subroutine",
      "method"
    ],
    "body": [
      "function ${2:myFunction} {",
      "  param (",
      "    ${3:}",
      "  )",
      "",
      "  ${4:# Your code here}",
      "}"
    ],
    "description": "Creates a function in PowerShell."
  },

  "FoolScript Function Args": {
    "prefix": ["foolsFuncArgs", "functionArgs", "functionWithArgs"],
    "body": [
      "# In PowerShell, functions can have arguments with default values.",
      "function ${2:myFunction} {",
      "  param (",
      "    [${3:Type}] $${4:arg1},",
      "    [${5:Type}] $${6:arg2} = ${7:defaultValue}",
      "  )",
      "",
      "  ${8:# Your code here}",
      "}"
    ],
    "description": "Creates a function with arguments in PowerShell, including an argument with a default value."
  },

  "FoolScript Named Arguments Function": {
    "prefix": ["foolsFuncArgsNamed", "functionNamedArgs"],
    "body": [
      "function ${2:MyFunction} {",
      "    param(",
      "        [Parameter(Mandatory)]",
      "        [${3:type}] ${4:$arg1},",
      "        [Parameter(Mandatory)]",
      "        [${5:type}] ${6:$arg2}",
      "    )",
      "    ${7:# Your code here}",
      "}"
    ],
    "description": "Creates a function with named arguments in PowerShell."
  },

  "FoolScript Arrow Function": {
    "prefix": ["foolsFuncArrow", "arrowFunction", "functionArrow"],
    "body": ["{${1:parameters} ->", "    ${2:# Your code here}", "}"],
    "description": "Represents an arrow function-like syntax using a script block in PowerShell."
  },

  "FoolScript Anonymous Function": {
    "prefix": [
      "foolsFuncAnon",
      "anonFunc",
      "anonymous",
      "closure",
      "lambda",
      "functionLiteral",
      "foolsFuncLambda"
    ],
    "body": [
      "{",
      "    param(${1:parameters})",
      "    ${2:# Your code here}",
      "}"
    ],
    "description": "Creates an anonymous function (script block) in PowerShell."
  },

  "FoolScript Comment": {
    "prefix": ["foolsComment", "comment", "note"],
    "body": ["# ${1:Your comment here}"],
    "description": "Creates a single-line comment in PowerShell."
  },

  "FoolScript Multi-Line Comment": {
    "prefix": [
      "foolsCommentMulti",
      "multiLineComment",
      "commentMultiLine",
      "blockComment"
    ],
    "body": ["<#", "${1:Your comment here}", "#>"],
    "description": "Creates a multi-line comment in PowerShell."
  },

  "FoolScript Throw Exception": {
    "prefix": ["foolsThrow", "throwError", "throwException"],
    "body": ["throw '${1:Your message here}'"],
    "description": "Throws an exception in PowerShell."
  },

  "FoolScript Try Catch": {
    "prefix": ["foolsTryCatch", "tryCatch"],
    "body": [
      "try {",
      "  # Your code here",
      "} catch {",
      "  # Your code here",
      "}"
    ],
    "description": "Creates a try...catch block in PowerShell."
  },

  "FoolScript Class": {
    "prefix": ["foolsClass", "class", "objectTemplate"],
    "body": ["class ${1:MyClass} {", "  # Your code here", "}"],
    "description": "Creates a class in PowerShell."
  },

  "FoolScript If Statement": {
    "prefix": ["foolsIf", "ifStatement"],
    "body": ["if (${1:condition}) {", "  # Your code here", "}"],
    "description": "Creates an if statement in PowerShell."
  },

  "FoolScript If Else Statement": {
    "prefix": ["foolsIfElse", "ifElseStatement"],
    "body": [
      "if (${1:condition}) {",
      "  # Your code here",
      "} else {",
      "  # Your code here",
      "}"
    ],
    "description": "Creates an if...else statement in PowerShell."
  },

  "FoolScript Ternary Operator": {
    "prefix": ["foolsTernary", "ternary", "conditionalOperator"],
    "body": ["${1:condition} ? ${2:trueValue} : ${3:falseValue}"],
    "description": "Creates a ternary operator in PowerShell."
  },

  "FoolScript Function Arguments": {
    "prefix": ["foolsFuncArgs", "functionArgs", "functionWithArgs"],
    "body": [
      "# In PowerShell, functions can have arguments with default values.",
      "function ${2:myFunction} {",
      "  param (",
      "    [${3:Type}] $${4:arg1},",
      "    [${5:Type}] $${6:arg2} = ${7:defaultValue}",
      "  )",
      "",
      "  ${8:# Your code here}",
      "}"
    ],
    "description": "Creates a function with arguments in PowerShell, including an argument with a default value."
  },

  "FoolScript Lambda Function (Script Block)": {
    "prefix": ["foolsFuncLambda", "lambda", "functionLiteral"],
    "body": [
      "# PowerShell does not have a 'lambda' keyword.",
      "# Instead, script blocks are used as anonymous functions.",
      "",
      "$lambda = {",
      "    param(${1:parameters})",
      "    ${2:# Your code here}",
      "}",
      "",
      "# Usage",
      "$result = $lambda.Invoke(${3:arguments})",
      "Write-Host \"Result: $result\""
    ],
    "description": "Creates a script block (similar to a lambda function) in PowerShell."
  },

  "FoolScript Function Syntax": {
    "prefix": ["foolsFuncSyntax", "functionSyntax", "functionDocs"],
    "body": [
      "# PowerShell Function Syntax",
      "# Basic function:",
      "# function functionName {",
      "#   param (",
      "#     parameters",
      "#   )",
      "#   # Your code here",
      "# }",
      "",
      "# Function with arguments:",
      "# function functionName {",
      "#   param (",
      "#     [Type] $arg1,",
      "#     [Type] $arg2,",
      "#     ...",
      "#   )",
      "#   # Your code here",
      "# }"
    ],
    "description": "Outlines the syntax for functions in PowerShell."
  },

  "FoolScript Generate List": {
    "prefix": ["foolsGenList", "generateList", "listGen"],
    "body": ["1..${1:length} | ForEach-Object { ${2:'item'} + $_ }"],
    "description": "Generates a list of a specific length in PowerShell."
  },

  "FoolScript Generate Map": {
    "prefix": ["foolsGenMap", "generateMap"],
    "body": [
      "# PowerShell does not have a built-in way to generate a map with a specific number of key-value pairs.",
      "# You can use a loop or a custom function to achieve this."
    ],
    "description": "Explains how to generate a map in PowerShell."
  },

  "FoolScript Project Structure (High-Level)": {
    "prefix": ["foolsStructure", "structure", "architecture"],
    "body": [
      "# Recommended High-Level PowerShell Project Structure:",
      "",
      "# - /",
      "#   - README.md: Documentation about the project.",
      "#   - .ps1 files: Individual PowerShell script files.",
      "",
      "# - /src",
      "#   - Contains PowerShell modules or scripts organized by functionality.",
      "",
      "# - /tests",
      "#   - Contains Pester tests for testing your PowerShell scripts and modules.",
      "",
      "# - /lib",
      "#   - Optional: Contains third-party libraries or scripts used in the project.",
      "",
      "# - /docs",
      "#   - Optional: Additional documentation, help files, or related documents.",
      "",
      "# - /tools",
      "#   - Optional: Utility and helper scripts that assist with project tasks.",
      "",
      "# - /output",
      "#   - Optional: A location to store output files generated by scripts.",
      "",
      "# Note:",
      "# - Organize .ps1 script files and modules in the src folder for clarity.",
      "# - Use descriptive names for script files to indicate their purpose or function."
    ],
    "description": "Explains a high-level project structure for PowerShell."
  },
  "FoolScript Static Variable": {
    "prefix": ["foolsVarStatic", "staticVariable", "associatedConstant"],
    "body": [
      "# PowerShell does not have static variables in the same way as some other languages.",
      "# You can use class variables or module variables to achieve similar functionality."
    ],
    "description": "Explains alternatives to static variables in PowerShell."
  },

  "FoolScript Variable Declaration Syntax": {
    "prefix": [
      "foolsVarSyntax",
      "variableSyntax",
      "howToVariables",
      "letSyntax"
    ],
    "body": [
      "# PowerShell Variable Declaration Syntax:",
      "",
      "# - $: (Scope: Global or Function)",
      "#   - Variables start with a dollar sign.",
      "#   - Can be reassigned and redeclared within their scope.",
      "#   - Use with caution due to potential scoping issues.",
      "",
      "# - const: (Scope: Global)",
      "#   - Cannot be reassigned or redeclared.",
      "#   - Use for values that should remain constant.",
      "",
      "# Note:",
      "# - PHP does not have a direct equivalent to 'let'.",
      "# - Use '$' for most variable declarations.",
      "# - Use 'const' for values that are known at compile time."
    ],
    "description": "Explains PowerShell variable declaration syntax"
  }
}
