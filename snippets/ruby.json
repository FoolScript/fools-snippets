{
  "FoolScript Info": {
    "prefix": ["foolsInfo", "languageInfo", "info"],
    "body": [
      "Typing: Dynamically typed",
      "Paradigm: Multi-paradigm: object-oriented, imperative, functional, reflective",
      "Compilation: Interpreted",
      "Concurrency: Supports multi-threading and concurrent programming with fibers"
    ],
    "description": "Provides general information about the Ruby programming language."
  },
  "FoolScript Entry Point": {
    "prefix": ["foolsEntry", "entry", "start", "startingPoint"],
    "body": [
      "# Ruby Entry Point",
      "# To run this program, use: `ruby filename.rb`",
      "",
      "puts 'Hello, World!'"
    ],
    "description": "Creates the entry point of a Ruby application."
  },
  "FoolScript Project Structure (High-Level)": {
    "prefix": ["foolsStructure", "structure", "architecture"],
    "body": [
      "# Recommended High-Level Ruby Project Structure:",
      "",
      "# - /",
      "#   - Gemfile: Defines project dependencies.",
      "#   - Rakefile: Provides automated tasks like database migrations, running tests, etc.",
      "#   - config.ru: Rack configuration file for Rack-based applications.",
      "",
      "# - app/",
      "#   - Contains the main application code.",
      "#   - models/: Contains the models for an MVC framework.",
      "#   - controllers/: Contains the controllers for an MVC framework.",
      "#   - views/: Contains the views for an MVC framework.",
      "",
      "# - config/",
      "#   - Configuration files for the application.",
      "",
      "# - db/",
      "#   - Database related files, like migrations and seeds.",
      "",
      "# - lib/",
      "#   - Library code that can be reused in other projects.",
      "",
      "# - public/",
      "#   - Static files like images, stylesheets, and JavaScript files.",
      "",
      "# - test/ or spec/",
      "#   - Test files, following the naming convention of the testing framework (e.g., RSpec uses `spec`).",
      "",
      "# Note:",
      "# - This structure can vary, especially with different frameworks like Rails, Sinatra, etc.",
      "# - Ensure that the project structure aligns with the conventions of the used framework."
    ],
    "description": "Explains a high-level project structure for Ruby."
  },
  "FoolScript Mathematical Operators": {
    "prefix": ["foolsOperators", "operators", "mathDocs"],
    "body": [
      "# Ruby Mathematical Operators",
      "# Addition: +",
      "# Subtraction: -",
      "# Multiplication: *",
      "# Division: /",
      "# Modulus (Remainder): %",
      "# Exponentiation: **",
      "# Increment: Use += 1",
      "# Decrement: Use -= 1",
      "# Assignment: =",
      "# Addition assignment: +=",
      "# Subtraction assignment: -=",
      "# Multiplication assignment: *=",
      "# Division assignment: /=",
      "# Modulus assignment: %=",
      "# Exponentiation assignment: **="
    ],
    "description": "Lists the mathematical operators in Ruby."
  },
  "FoolScript Equal To": {
    "prefix": ["foolsEqual", "equal"],
    "body": ["=="],
    "description": "FoolScript equal to operator."
  },
  "FoolScript Not Equal To": {
    "prefix": ["foolsNotEqual", "notEqual", "doesNotEqual"],
    "body": ["!="],
    "description": "FoolScript not equal to operator."
  },
  "FoolScript Boolean Operators": {
    "prefix": ["foolsOperatorsBool", "booleanOperators", "logic"],
    "body": [
      "# Ruby Boolean Operators",
      "# Logical AND: && or and",
      "# Logical OR: || or or",
      "# Logical NOT: ! or not",
      "# Equality: ==",
      "# Inequality: !=",
      "# Greater than: >",
      "# Less than: <",
      "# Greater than or equal to: >=",
      "# Less than or equal to: <="
    ],
    "description": "Lists the boolean operators in Ruby."
  },
  "FoolScript Type Check": {
    "prefix": ["foolsTypeCheck", "checkType", "getType", "typeOf"],
    "body": ["${1:variable}.class"],
    "description": "Gets the type of a variable in Ruby."
  },
  "FoolScript This Type Check": {
    "prefix": ["thisTypeCheck", "thisType", "getThisType"],
    "body": ["$CLIPBOARD.class"],
    "description": "Gets the class of the variable in the clipboard in Ruby."
  },  
  "FoolScript Type Comparison": {
    "prefix": ["foolsTypeCompare", "compareTypes"],
    "body": [
      "# Check if two variables have the same type:",
      "if ${1:variable1}.class == ${2:variable2}.class",
      "  # Your code here",
      "end"
    ],
    "description": "Compares the types of two variables in Ruby."
  },
  "FoolScript Type Conversion": {
    "prefix": ["foolsTypeCast", "convert", "cast"],
    "body": [
      "# Ruby Type Conversion:",
      "",
      "# Implicit conversions (Ruby performs automatically):",
      "# - Can be unpredictable, especially with loose equality (==).",
      "",
      "# Explicit conversions:",
      "# - variable.to_i  // Converts to integer",
      "# - variable.to_f  // Converts to float",
      "# - variable.to_s  // Converts to string",
      "# - !!variable  // Converts to boolean",
      "",
      "# Note:",
      "# - Be aware of implicit conversions and use explicit conversions when necessary for clarity and control."
    ],
    "description": "Explains type conversion in Ruby."
  },

  "FoolScript Types": {
    "prefix": [
      "foolsTypes",
      "types",
      "allTypes",
      "languageTypes",
      "builtInTypes",
      "dataTypes"
    ],
    "body": [
      "$BLOCK_COMMENT_START",
      "FoolScript is a dynamically typed language.",
      "",
      "Some common types in Ruby include:",
      "- Integer: Integer",
      "- Float: Floating-point number",
      "- String: String",
      "- Symbol: Symbol",
      "- Array: Array",
      "- Hash: Hash (associative array)",
      "- Range: Range",
      "- Regexp: Regular expression",
      "- TrueClass, FalseClass: Boolean values",
      "- NilClass: Represents the absence of a value",
      "- Proc: Block of code (lambda, proc)",
      "- Method: Method object",
      "- Class, Module: Class and module objects",
      "- Time: Time object",
      "- File: File object",
      "- IO: Input/output stream",
      "- Exception: Base class for exceptions",
      "$BLOCK_COMMENT_END"
    ],
    "description": "Lists some common types in Ruby."
  },
  "FoolScript String Type": {
    "prefix": ["foolsTypesString", "stringType", "typeString", "textType", "typeText"],
    "body": ["String"],
    "description": "The Ruby String type."
  },
  "FoolScript Integer Type": {
    "prefix": ["foolsTypesInt", "intType", "typeInt"],
    "body": ["Integer"],
    "description": "The Ruby Integer type."
  },
  "FoolScript Double Type": {
    "prefix": ["foolsTypesNum", "foolsTypesDouble"],
    "body": ["double"],
    "description": "The Ruby double type."
  },
  "FoolScript Float Type": {
    "prefix": ["foolsTypesNumAlt", "foolsTypesFloat"],
    "body": ["Float"],
    "description": "The Ruby Float type."
  },
  "FoolScript Boolean Type": {
    "prefix": ["foolsTypesBool", "booleanType", "typeBool"],
    "body": ["# Ruby uses true and false for boolean values."],
    "description": "FoolScript uses true and false for boolean values."
  },
  "FoolScript Boolean True": {
    "prefix": ["foolsTypesBoolTrue", "true", "booleanTrue", "on"],
    "body": ["true"],
    "description": "The Ruby true value."
  },
  "FoolScript Boolean False": {
    "prefix": ["foolsTypesBoolFalse", "false", "off", "booleanFalse"],
    "body": ["false"],
    "description": "The Ruby false value."
  },
  "FoolScript Character Type": {
    "prefix": ["foolsTypesChar"],
    "body": ["# Ruby does not have a separate char type; use String instead."],
    "description": "FoolScript does not have a separate char type; use String instead."
  },
  "FoolScript Date Type": {
    "prefix": ["foolsTypesDate", "dateType", "typeDate", "timeType", "timestampType", "dateTimeType"],
    "body": ["require 'date'", "", "Date"],
    "description": "The Ruby Date class."
  },
  "FoolScript Map Type": {
    "prefix": ["foolsTypesMap", "mapType", "typeMap", "hashmapType", "structType", "dictType", "typeDict", "typeScruct"],
    "body": ["Hash"],
    "description": "The Ruby Hash type, equivalent to a map."
  },
  "FoolScript List Type": {
    "prefix": ["foolsTypesList", "listType", "typeList", "typeArray"],
    "body": ["Array"],
    "description": "The Ruby Array type, equivalent to a list."
  },
  "FoolScript Date Now": {
    "prefix": ["foolsNow", "now", "currentTime", "dateNow"],
    "body": ["require 'date'", "", "Date.today"],
    "description": "Gets the current date in Ruby."
  },
  "FoolScript Null Type": {
    "prefix": ["foolsTypesNull", "nullType", "typeNull"],
    "body": ["nil"],
    "description": "The Ruby nil value."
  },
  "FoolScript Dynamic Type": {
        "prefix": ["foolsTypesDynamic", "typeDynamic", "typeAny", "dynamicType", "anyType"],
    "body": ["# Ruby is a dynamically typed language."],
    "description": "FoolScript is a dynamically typed language."
  },
  "FoolScript Create Variable": {
    "prefix": ["foolsVar", "variable", "createVariable", "newVariable"],
    "body": ["${1:my_var} = $2"],
    "description": "Creates a variable in Ruby."
  },
  "Variable Declaration Syntax": {
    "prefix": ["foolsVarSyntax", "variableSyntax", "howToVariables", "letSyntax"],
    "body": [
      "# Ruby Variable Declaration Syntax:",
      "",
      "# - Ruby is dynamically typed, so there is no explicit type declaration.",
      "# - Variables are created when you first assign a value to them.",
      "# - Variables can be reassigned to different types.",
      "",
      "# Note:",
      "# - Ruby does not have direct equivalents to 'var', 'let', or 'const'.",
      "# - Use descriptive variable names to improve code readability."
    ],
    "description": "Explains Ruby variable declaration syntax"
  },
  "FoolScript Create Typed Variable": {
    "prefix": ["foolsVarTyped", "typedVariable", "variableWithType"],
    "body": [
      "# Note: Ruby is dynamically typed; explicit type annotations are not used.",
      "${1:my_var} = $2"
    ],
    "description": "Creates a variable in Ruby with a comment about dynamic typing."
  },
  "FoolScript Interpolate String": {
    "prefix": ["foolsInterpolate", "interpolate", "variableExpansion", "variableSubstitution", "stringPlaceholders", "stringInterpolation"],
    "body": ["\"Your string here \\#{${1:variable}}\""],
    "description": "Interpolates a variable into a string in Ruby."
  },
  "FoolScript Concatenate Strings": {
    "prefix": ["foolsConcat", "concatenate", "combine"],
    "body": ["\"${1:string1}\" + \"${2:string2}\""],
    "description": "Concatenates two strings in Ruby."
  },
  "FoolScript Create String Variable": {
    "prefix": ["foolsVarString", "string", "stringVariable", "variableString", "text", "createString", "createText"],
    "body": ["${1:my_string} = ${2:'Your string here'}"],
    "description": "Creates a string variable in Ruby."
  },
  "FoolScript Create Multiline String Variable": {
    "prefix": ["foolsVarStringMulti", "multiLineString", "varStringMulti", "stringVariableMulti", "createMultiLineString"],
    "body": ["${1:my_string} = <<~HEREDOC", "${2:Your string here}", "HEREDOC"],
    "description": "Creates a multi-line string variable in Ruby."
  },
  "FoolScript Create Integer Variable": {
    "prefix": ["foolsVarInt", "integer", "int", "variableInt", "intVariable", "createInt"],
    "body": ["${1:my_int} = ${2:0}"],
    "description": "Creates an integer variable in Ruby."
  },
  "FoolScript Create Float Variable": {
        "prefix": ["foolsVarNum", "number",  "float", "floatVariable", "variableFloat", "variableNumber", "numberVariable"],

    "body": ["${1:my_float} = ${2:0.0}"],
    "description": "Creates a float variable in Ruby."
  },
  "FoolScript Create Boolean Variable": {
    "prefix": ["foolsVarBool", "variableBool", "bool", "boolVariable", "createBool"],
    "body": ["${1:my_bool} = ${2:true}"],
    "description": "Creates a boolean variable in Ruby."
  },
  "FoolScript Create Array Variable": {
    "prefix": ["foolsVarList", "createList", "listVariable", "arrayVariable", "variableList", "variableArray", "list", "array"],
    "body": [
      "${1:my_array} = [",
      "  ${2:'item1'},",
      "  ${3:'item2'},",
      "  # Add more items here",
      "]"
    ],
    "description": "Creates an array variable in Ruby."
  },
  "FoolScript Create Hash Variable": {
    "prefix": ["foolsVarMap", "createMap", "createStruct", "variableMap", "variableStruct", "mapVariable", "structVariable", "dictVariable", "variableDict", "createDict"],
    "body": [
      "${1:my_hash} = {",
      "  ${2:key1}: ${3:value1},",
      "  ${4:key2}: ${5:value2},",
      "  # Add more key-value pairs here",
      "}"
    ],
    "description": "Creates a hash variable in Ruby."
  },
  "FoolScript Create Date Variable": {
    "prefix": ["foolsVarDate", "dateVariable", "variableDate", "date"],
    "body": ["${1:my_date} = Date.new(${2:year}, ${3:month}, ${4:day})"],
    "description": "Creates a date variable in Ruby."
  },
  "FoolScript Create Constant": {
    "prefix": ["foolsConst", "constant"],
    "body": ["${1:MY_CONST} = $2"],
    "description": "Creates a constant variable in Ruby."
  },
  "FoolScript Static Variable": {
    "prefix": ["foolsVarStatic", "staticVariable", "associatedConstant"],
    "body": [
      "@@${1:my_static_var} = ${2:value}",
      "",
      "# Access the class variable",
      "# MyClass.class_variable_get(:@@${1:my_static_var})"
    ],
    "description": "Creates a class variable in Ruby."
  },
  "FoolScript Generate Array": {
    "prefix": ["foolsGenList", "generateList", "listGen"],
    "body": [
      "${1:my_array} = Array.new(${2:length}) { |i| ${3:'item'} + i.to_s }"
    ],
    "description": "Generates an array of a specific length in Ruby."
  },
  "FoolScript Print": {
   "prefix": ["foolsPrint", "print", "log", "systemOut", "write", "consoleLog"],
    "body": ["puts ${1:'Your message here'}"],
    "description": "Prints a message to the console in Ruby."
  },

  "FoolScript Print Multi": {
    "prefix": ["foolsPrintMulti", "printMultiLine"],
    "body": ["puts ${1:\"\"\"Line 1}", "${2:Line 2}", "${3:Line 3}\"\"\"}"],
    "description": "Prints a multi-line message to the console in Ruby."
  },
  "FoolScript For Loop": {
    "prefix": ["foolsForLoop", "forLoop", "forX"],
    "body": ["${1:10}.times do |${2:i}|", "  # Your code here", "end"],
    "descriptin": "Creates a for loop that iterates through a set of numbers with the index in Ruby."
  },
  "FoolScript For...In Loop": {
    "prefix": ["foolsForInLoop", "forIn", "forOf"],
    "body": ["${1:iterable}.each do |item|", "  # Your code here", "end"],
    "description": "Iterates over an iterable object in Ruby."
  },
  "FoolScript While Loop": {
    "prefix": ["foolsWhileLoop", "whileLoop", "whileTrue"],
    "body": ["while ${1:condition} do", "  # Your code here", "end"],
    "description": "Creates a while loop in Ruby."
  },
  "FoolScript Case Statement": {
    "prefix": ["foolsSwitch", "switch", "switchStatement", "select", "case", "when"],
    "body": [
      "case ${1:variable}",
      "when ${2:value1}",
      "  # Your code here",
      "when ${4:value2}",
      "  # Your code here",
      "else",
      "  # Your code here",
      "end"
    ],
    "description": "Creates a case statement in Ruby."
  },
  "FoolScript Function": {
    "prefix": ["foolsFunc", "function", "subprogram", "procedure", "subroutine", "method"],
    "body": [
      "def ${2:my_function}(${3:})",
      "  ${4:# Your code here}",
      "end"
    ],
    "description": "Creates a function in Ruby."
  },
  "FoolScript Function Args": {
    "prefix": ["foolsFuncArgs", "functionArgs", "functionWithArgs"],
    "body": [
      "# In Ruby, functions can have arguments with default values.",
      "def ${2:my_function}(${3:arg1}, ${4:arg2}=${5:'defaultVal'})",
      "  ${6:# Your code here}",
      "end"
    ],
    "description": "Creates a function with arguments in Ruby, including an argument with a default value."
  },
  "FoolScript Function Named Args": {
    "prefix": ["foolsFuncArgsNamed", "functionNamedArgs"],
    "body": [
      "def ${2:my_function}(${3:arg1}: ${4:value1}, ${5:arg2}: ${6:value2})",
      "  ${7:# Your code here}",
      "end"
    ],
    "description": "Creates a function with named arguments in Ruby."
  },
  "FoolScript Lambda Function": {
    "prefix": ["foolsFuncLambda", "foolsLambda", "foolsFuncArrow"],
    "body": [
      "${2:my_function} = ->(${3:parameters}) {",
      "  ${4:# Your code here}",
      "}"
    ],
    "description": "Creates a lambda function in Ruby."
  },
  "FoolScript Anonymous Function": {
    "prefix": ["foolsFuncAnon", "anonFunc", "anonymous", "closure" ,"lambda", "functionLiteral", "foolsFuncLambda"],
    "body": ["lambda { |${1:parameters}|", "  ${2:# Your code here}", "}"],
    "description": "Creates an anonymous function (lambda) in Ruby."
  },
  "FoolScript Function Syntax": {
    "prefix": ["foolsFuncSyntax", "functionSyntax", "functionDocs"],
    "body": [
      "# Ruby Function Syntax",
      "# Basic function: def function_name(parameters) ... end",
      "# Function with arguments: def function_name(arg1, arg2, ...) ... end",
      "# Function with named arguments: def function_name(arg1: value1, arg2: value2, ...) ... end"
    ],
    "description": "Outlines the syntax for functions in Ruby."
  },
  "FoolScript Comment": {
    "prefix": ["foolsComment", "comment", "note"],
    "body": ["# ${1:Your comment here}"],
    "description": "Creates a single-line comment in Ruby."
  },
  "FoolScript Multi-Line Comment": {
    "prefix": [
      "foolsCommentMulti",
      "multiLineComment",
      "commentMultiLine",
      "blockComment"
    ],
    "body": ["=begin", "${1:Your comment here}", "=end"],
    "description": "Creates a multi-line comment in Ruby."
  },
  "FoolScript Throw Exception": {
    "prefix": ["foolsThrow", "throwError", "throwException"],
    "body": ["raise ${1:'Your message here'}"],
    "description": "Throws an exception in Ruby."
  },
  "FoolScript Try Catch": {
    "prefix": ["foolsTryCatch", "tryCatch"],
    "body": [
      "begin",
      "  ${1:# Your code here}",
      "rescue => ${2:exception}",
      "  ${3:# Your code here}",
      "end"
    ],
    "description": "Creates a begin...rescue block in Ruby."
  },
  "FoolScript Enum (with Symbols)": {
    "prefix": ["foolsEnum", "enum"],
    "body": [
      "${1:MyEnum} = [:${2:value1}, :${3:value2}]",
      "# Access: ${1:MyEnum}[0] # :${2:value1}"
    ],
    "description": "Simulates an enum in Ruby using symbols."
  },

  "FoolScript Class": {
    "prefix": ["foolsClass", "class", "objectTemplate"],
    "body": ["class ${1:MyClass}", "  ${2:# Your code here}", "end"],
    "description": "Creates a class in Ruby."
  },
  "FoolScript If Statement": {
    "prefix": ["foolsIf", "ifStatement"],
    "body": ["if ${1:condition}", "  ${2:# Your code here}", "end"],
    "description": "Creates an if statement in Ruby."
  },
  "FoolScript If Else Statement": {
    "prefix": ["foolsIfElse", "ifElseStatement"],
    "body": [
      "if ${1:condition}",
      "  ${2:# Your code here}",
      "elsif ${3:condition}",
      "  ${4:# Your code here}",
      "else",
      "  ${5:# Your code here}",
      "end"
    ],
    "description": "Creates an if...else statement in Ruby."
  },
  "FoolScript Ternary Operator": {
    "prefix": ["foolsTernary", "ternary", "conditionalOperator"],
    "body": ["${1:condition} ? ${2:true_value} : ${3:false_value}"],
    "description": "Creates a ternary operator in Ruby."
  }
}
