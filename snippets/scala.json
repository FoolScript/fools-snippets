{
  "Scala Info": {
    "scope": "scala",
    "prefix": ["foolsInfo", "languageInfo", "info"],
    "body": [
      "// Typing: Statically typed",
      "// Paradigm: Multi-paradigm: object-oriented, functional",
      "// Compilation: Compiled to bytecode for the Java Virtual Machine (JVM)",
      "// Concurrency: Supports multi-threading and concurrent programming with actors and futures"
    ],
    "description": "Provides general information about the Scala programming language."
  },

  "Scala Entry Point": {
    "scope": "scala",
    "prefix": ["foolsEntry", "entry", "start", "startingPoint"],
    "body": [
      "// Scala Entry Point",
      "// To run this program, use: `scala Main.scala`",
      "",
      "object Main extends App {",
      "  // Your code here",
      "}"
    ],
    "description": "Creates the entry point of a Scala application."
  },

  "Scala Project Structure (High-Level)": {
    "scope": "scala",
    "prefix": ["foolsStructure", "structure", "architecture"],
    "body": [
      "// Recommended High-Level Scala Project Structure:",
      "",
      "// - build.sbt: The build definition file for SBT (Scala Build Tool).",
      "// - project/",
      "//   - Contains build-related scripts and configurations for SBT.",
      "// - src/",
      "//   - main/",
      "//     - scala/",
      "//       - Contains Scala source files organized by package.",
      "//     - java/",
      "//       - Optional: Contains Java source files if the project mixes Scala and Java.",
      "//     - resources/",
      "//       - Contains non-compiled resources like configurations, JSON files, etc.",
      "//   - test/",
      "//     - scala/",
      "//       - Contains Scala test files, typically using frameworks like ScalaTest or Specs2.",
      "//     - java/",
      "//       - Optional: Contains Java test files if the project mixes Scala and Java.",
      "//     - resources/",
      "//       - Test-specific resources.",
      "// - lib/",
      "//   - Optional: Contains unmanaged library dependencies (jars).",
      "// - target/",
      "//   - Contains compiled bytecode and other build artifacts.",
      "",
      "// Note:",
      "// - The structure is based on SBT's standard layout.",
      "// - Use the 'lib' directory for unmanaged dependencies, although managed dependencies",
      "//   in the build.sbt file are preferred."
    ],
    "description": "Explains a high-level project structure for Scala."
  },  

  "Scala Mathematical Operators": {
    "scope": "scala",
    "prefix": ["foolsOperators", "operators", "mathDocs"],
    "body": [
      "// Scala Mathematical Operators",
      "// Addition: +",
      "// Subtraction: -",
      "// Multiplication: *",
      "// Exponentiation: Math.pow(base, exponent)",
      "// Division: /",
      "// Modulus (Remainder): %",
      "// Increment: Use += 1",
      "// Decrement: Use -= 1",
      "// Assignment: =",
      "// Addition assignment: +=",
      "// Subtraction assignment: -=",
      "// Multiplication assignment: *=",
      "// Division assignment: /=",
      "// Modulus assignment: %="
    ],
    "description": "Lists the mathematical operators in Scala."
  },
  "Scala Equal To": {
    "scope": "scala",
    "prefix": ["foolsEqual", "equal"],
    "body": ["=="],
    "description": "Scala equal to operator (structural equality for objects)."
  },
  "Scala Not Equal To": {
    "scope": "scala",
    "prefix": ["foolsNotEqual", "notEqual", "doesNotEqual"],
    "body": ["!="],
    "description": "Scala not equal to operator."
  },
  "Scala Boolean Operators": {
    "scope": "scala",
    "prefix": ["foolsOperatorsBool", "booleanOperators", "logic"],
    "body": [
      "// Scala Boolean Operators",
      "// Logical AND: &&",
      "// Logical OR: ||",
      "// Logical NOT: !",
      "// Equality: ==",
      "// Inequality: !=",
      "// Greater than: >",
      "// Less than: <",
      "// Greater than or equal to: >=",
      "// Less than or equal to: <="
    ],
    "description": "Lists the boolean operators in Scala."
  }
,  
  "Scala Type Check": {
    "scope": "scala",
    "prefix": ["foolsTypeCheck", "checkType", "getType", "typeOf"],
    "body": ["${1:variable}.getClass"],
    "description": "Gets the type of a variable in Scala."
  },
  "Scala This Type Check": {
    "scope": "scala",
    "prefix": ["thisTypeCheck", "thisType", "getThisType"],
    "body": ["$CLIPBOARD.getClass.getSimpleName"],
    "description": "Gets the simple name of the class of the variable in the clipboard in Scala."
  },  
  "Scala Type Comparison": {
    "scope": "scala",
    "prefix": ["foolsTypeCompare", "compareTypes"],
    "body": [
      "// Check if two variables have the same type:",
      "if (${1:variable1}.getClass == ${2:variable2}.getClass) {",
      "  // Your code here",
      "}"
    ],
    "description": "Compares the types of two variables in Scala."
  },
  "Scala Type Conversion": {
    "scope": "scala",
    "prefix": ["foolsTypeCast", "convert", "cast"],
    "body": [
      "// Scala Type Conversion:",
      "",
      "// Implicit conversions (compiler performs automatically):",
      "// - Smaller numeric types to larger numeric types (e.g., Int to Double).",
      "",
      "// Explicit conversions (using casts):",
      "// - variable.asInstanceOf[Type]  // Type casting (can throw ClassCastException if conversion fails)",
      "// - variable.toType  // Conversion methods (e.g., toInt, toDouble)",
      "",
      "// Note:",
      "// - Be cautious with explicit conversions, as they can lead to errors if the conversion is not valid."
    ],
    "description": "Explains type conversion in Scala."
  },
  "Scala Types": {
    "scope": "scala",
    "prefix": ["foolsTypes", "types", "allTypes", "languageTypes", "builtInTypes", "dataTypes"],
    "body": [
      "$BLOCK_COMMENT_START",
      "Scala is a statically typed language.",
      "",
      "Types in Scala include:",
      "- Int: Integer",
      "- Double: Double-precision floating-point number",
      "- Float: Single-precision floating-point number",
      "- Char: Character",
      "- Boolean: Boolean",
      "- String: String",
      "- Array[T]: Array of type T",
      "- List[T]: List of type T",
      "- Set[T]: Set of unique elements of type T",
      "- Map[K, V]: Map with key type K and value type V",
      "- Any: Base type of all non-nullable types",
      "- Unit: Type with only one value - Unit (similar to void)",
      "- Nothing: Type with no values - used for functions that never return",
      "- Option[T]: Type representing a value of type T or None",
      "- Function types (e.g., (Int, Int) => Int): Types representing functions",
      "- Case classes: Classes primarily used to hold data",
      "- Sealed classes: Classes that restrict which other classes can inherit from them",
      "- Enum classes: Enumeration classes",
      "- Object: Singleton object",
      "- Trait: Interface type",
      "$BLOCK_COMMENT_END"
    ],
    "description": "Lists the types in Scala."
  },

  "Scala String Type": {
    "scope": "scala",
    "prefix": ["foolsTypesString", "stringType", "typeString", "textType", "typeText"],
    "body": ["String"],
    "description": "The Scala String type."
  },

  "Scala Integer Type": {
    "scope": "scala",
    "prefix": ["foolsTypesInt", "intType", "typeInt"],
    "body": ["Int"],
    "description": "The Scala Int type."
  },

  "Scala Double Type": {
    "scope": "scala",
    "prefix": ["foolsTypesNum", "numberType", "typeNumber", "doubleType", "typeDouble"],
    "body": ["Double"],
    "description": "The Scala Double type."
  },

  "Scala Float Type": {
    "scope": "scala",
    "prefix": ["foolsTypesNumAlt", "floatType", "typeFloat"],
    "body": ["Float"],
    "description": "The Scala Float type."
  },

  "Scala Boolean Type": {
    "scope": "scala",
    "prefix": ["foolsTypesBool", "booleanType", "typeBool"],
    "body": ["Boolean"],
    "description": "The Scala Boolean type."
  },

  "Scala Boolean True": {
    "scope": "scala",
    "prefix": ["foolsTypesBoolTrue", "true", "booleanTrue", "on"],
    "body": ["true"],
    "description": "The Scala true value."
  },

  "Scala Boolean False": {
    "scope": "scala",
    "prefix": ["foolsTypesBoolFalse", "false", "off", "booleanFalse"],
    "body": ["false"],
    "description": "The Scala false value."
  },

  "Scala Date Type": {
    "scope": "scala",
    "prefix": ["foolsTypesDate", "dateType", "typeDate", "timeType", "timestampType", "dateTimeType"],
    "body": [
      "// Scala does not have a built-in Date type. Use the java.time package or libraries like ScalaTime for date and time operations."
    ],
    "description": "Explains the absence of a built-in Date type in Scala."
  },

  "Scala Map Type": {
    "scope": "scala",
    "prefix": ["foolsTypesMap", "mapType", "typeMap", "hashmapType", "structType", "dictType", "typeDict", "typeScruct"],
    "body": ["Map[${1:keyType}, ${2:valueType}]"],
    "description": "The Scala Map type."
  },

  "Scala List Type": {
    "scope": "scala",
    "prefix": ["foolsTypesList", "listType", "typeList", "typeArray"],
    "body": ["List[${1:type}]"],
    "description": "The Scala List type."
  },

  "Scala Date Now": {
    "scope": "scala",
    "prefix": ["foolsNow", "now", "currentTime", "dateNow"],
    "body": ["// Use java.time or ScalaTime to get the current date and time."],
    "description": "Explains how to get the current date and time in Scala."
  },

  "Scala Null Type": {
    "scope": "scala",
    "prefix": ["foolsTypesNull", "nullType", "typesNull"],
    "body": ["null"],
    "description": "The Scala null value."
  },

  "Scala Dynamic Type": {
    "scope": "scala",
        "prefix": ["foolsTypesDynamic", "typesDynamic", "typesAny", "dynamicType", "anyType"],
    "body": ["Any"],
    "description": "The Scala Any type."
  },

  "Scala Create Variable": {
    "scope": "scala",
    "prefix": ["foolsVar", "variable", "createVariable", "newVariable"],
    "body": ["var ${1:myVar}: ${2:Type} = $3"],
    "description": "Creates a variable in Scala."
  },

  "Scala Variable Declaration Syntax": {
    "scope": "scala",
    "prefix": ["foolsVarSyntax", "variableSyntax", "howToVariables", "letSyntax"],
    "body": [
      "// Scala Variable Declaration Syntax:",
      "",
      "// - var: (Scope: Block or Class)",
      "//   - Can be reassigned.",
      "//   - Use for variables that need to be changed.",
      "",
      "// - val: (Scope: Block or Class)",
      "//   - Cannot be reassigned after initialization.",
      "//   - Preferred for values that should remain constant.",
      "",
      "// Note:",
      "// - Use 'val' by default for values that won't change.",
      "// - Use 'var' only when you need to reassign the variable."
    ],
    "description": "Explains Scala variable declaration syntax"
  },

  "Scala Create Typed Variable": {
    "scope": "scala",
    "prefix": ["foolsVarTyped", "typedVariable", "variableWithType"],
    "body": ["var ${1:myVar}: ${2:Type} = $3"],
    "description": "Creates a typed variable in Scala."
  },

  "Scala Create Nullable Variable": {
    "scope": "scala",
    "prefix": ["foolsVarNullable", "variableNullable", "nullableVariable", "nil", "none", "nothing", "null", "option"],
    "body": ["var ${1:myVar}: Option[${2:Type}] = None"],
    "description": "Creates a nullable variable in Scala using the Option type."
  },

  "Scala Interpolate String": {
    "scope": "scala",
    "prefix": ["foolsInterpolate", "interpolate", "variableExpansion", "variableSubstitution", "stringPlaceholders", "stringInterpolation"],
    "body": ["s\"Your string here \\${${1:variable}}\""],
    "description": "Interpolates a variable into a string in Scala."
  },

  "Scala Concatenate String": {
    "scope": "scala",
    "prefix": ["foolsConcat", "concatenate", "combine"],
    "body": ["${1:\"string1\"} + ${2:\"string2\"}"],
    "description": "Concatenates two strings in Scala."
  },

  "Scala Create String Variable": {
    "scope": "scala",
    "prefix": ["foolsVarString", "string", "stringVariable", "variableString", "text", "createString", "createText"],
    "body": ["val ${1:myString} = \"${2:Your string here}\""],
    "description": "Creates a string variable in Scala."
  },

  "Scala Create Multi-Line String Variable": {
    "scope": "scala",
    "prefix": ["foolsVarStringMulti", "multiLineString", "varStringMulti", "stringVariableMulti", "createMultiLineString"],
    "body": [
      "val ${1:myString} = \"\"\"",
      "${2:Line 1}",
      "${3:Line 2}",
      "${4:Line 3}",
      "\"\"\""
    ],
    "description": "Creates a multi-line string variable in Scala."
  },

  "Scala Create Integer Variable": {
    "scope": "scala",
    "prefix": ["foolsVarInt", "integer", "int", "variableInt", "intVariable", "createInt"],
    "body": ["val ${1:myInt} = ${2:0}"],
    "description": "Creates an integer variable in Scala."
  },

  "Scala Create Double Variable": {
    "scope": "scala",
    "prefix": ["foolsVarDouble", "double", "doubleVariable", "variableDouble", "createDouble"],
    "body": ["val ${1:myDouble} = ${2:0.0}"],
    "description": "Creates a double variable in Scala."
  },

  "Scala Create Boolean Variable": {
    "scope": "scala",
    "prefix": ["foolsVarBool", "variableBool", "bool", "boolVariable", "createBool"],
    "body": ["val ${1:myBool} = ${2:true}"],
    "description": "Creates a boolean variable in Scala."
  },

  "Scala Create Array Variable": {
    "scope": "scala",
    "prefix": ["foolsVarList", "createList", "listVariable", "arrayVariable", "variableList", "variableArray", "list", "array"],
    "body": ["val ${1:myList} = List(${2:items})"],
    "description": "Creates a list variable in Scala."
  },

  "Scala Create Map Variable": {
    "prefix": ["foolsVarMap", "createMap", "createStruct", "variableMap", "variableStruct", "mapVariable", "structVariable", "dictVariable", "variableDict", "createDict"],
    "body": ["val ${1:myMap} = Map(${2:key} -> ${3:value})"],
    "description": "Creates a map variable in Scala."
  },

  "Scala Create Constant": {
    "scope": "scala",
    "prefix": ["foolsConst", "constant"],
    "body": ["val ${1:myConst} = $2"],
    "description": "Creates a constant variable in Scala using the val keyword."
  },

  "Scala Print": {
    "scope": "scala",
   "prefix": ["foolsPrint", "print", "log", "systemOut", "write", "consoleLog"],
    "body": ["println(${1:'Your message here'})"],
    "description": "Prints a message to the console in Scala."
  },

  "Scala Print Multi": {
    "scope": "scala",
    "prefix": ["foolsPrintMulti", "printMultiLine"],
    "body": [
      "println(\"\"\"",
      "${1:Line 1}",
      "${2:Line 2}",
      "${3:Line 3}",
      "\"\"\")"
    ],
    "description": "Prints a multi-line message to the console in Scala."
  },

  "Scala For Loop": {
    "scope": "scala",
    "prefix": ["foolsForLoop", "forLoop", "forX"],
    "body": ["for (i <- ${1:0 until 10}) {", "  // Your code here", "}"],
    "description": "Creates a for loop that iterates through a set of numbers with the index in Scala."
  },

  "Scala For Each Loop": {
    "prefix": ["foolsForEachLoop", "forEach"],
    "body": ["for (item <- ${1:iterable}) {", "  // Your code here", "}"],
    "description": "Iterates over an iterable object in Scala."
  },

  "Scala While Loop": {
    "prefix": ["foolsWhileLoop", "whileLoop", "whileTrue"],
    "body": ["while (${1:condition}) {", "  // Your code here", "}"],
    "description": "Creates a while loop in Scala."
  },

  "Scala If Statement": {
    "prefix": ["foolsIf", "ifStatement"],
    "body": ["if (${1:condition}) {", "  // Your code here", "}"],
    "description": "Creates an if statement in Scala."
  },

  "Scala If Else Statement": {
    "scope": "scala",
    "prefix": ["foolsIfElse", "ifElseStatement"],
    "body": [
      "if (${1:condition}) {",
      "  // Your code here",
      "} else {",
      "  // Your code here",
      "}"
    ],
    "description": "Creates an if...else statement in Scala."
  },

  "Ternary Operator (Alternative)": {
    "scope": "scala",
    "prefix": ["foolsTernary", "ternary", "conditionalOperator"],
    "body": [
      "// Scala does not have a ternary operator.",
      "// Use an if-else expression instead:",
      "",
      "val result = if (${1:condition}) ${2:trueValue} else ${3:falseValue}"
    ],
    "description": "Provides an alternative to the ternary operator in Scala."
  },

  "Scala Function": {
    "scope": "scala",
    "prefix": ["foolsFunc", "function", "subprogram", "procedure", "subroutine", "method"],
    "body": [
      "def ${2:myFunction}(${3:}): ${1:Unit} = {",
      "  ${4:// Your code here}",
      "}"
    ],
    "description": "Creates a function in Scala."
  },

  "Function Syntax": {
    "scope": "scala",
    "prefix": ["foolsFuncSyntax", "functionSyntax", "functionDocs"],
    "body": [
      "// Scala Function Syntax:",
      "",
      "// Basic function:",
      "// def functionName(parameters): ReturnType = { ... }",
      "",
      "// Function with arguments:",
      "// def functionName(arg1: Type1, arg2: Type2, ...): ReturnType = { ... }",
      "",
      "// Function with named arguments and default values:",
      "// def functionName(arg1: Type1 = defaultValue1, arg2: Type2 = defaultValue2, ...): ReturnType = { ... }"
    ],
    "description": "Outlines the syntax for functions in Scala."
  },

  "Scala Function Args": {
    "scope": "scala",
    "prefix": ["foolsFuncArgs", "functionArgs", "functionWithArgs"],
    "body": [
      "// In Scala, functions can have arguments with default values.",
      "def ${2:myFunction}(${3:arg1}: ${4:Type1}, ${5:arg2}: ${6:Type2} = ${7:defaultValue}): ${1:Unit} = {",
      "  ${8:// Your code here}",
      "}"
    ],
    "description": "Creates a function with arguments in Scala, including an argument with a default value."
  },

  "Scala Function Named Args": {
    "scope": "scala",
    "prefix": ["foolsFuncArgsNamed", "functionNamedArgs"],
    "body": [
      "def ${2:myFunction}(${3:arg1}: ${4:Type1} = ${5:defaultValue1}, ${6:arg2}: ${7:Type2} = ${8:defaultValue2}): ${1:Unit} = {",
      "  ${9:// Your code here}",
      "}"
    ],
    "description": "Creates a function with named arguments and default values in Scala."
  },

  "Scala Lambda": {
    "scope": "scala",
    "prefix": ["foolsFuncLambda", "foolsLambda"],
    "body": ["(${1:parameters}) => ${2:expression}"],
    "description": "Creates a lambda function in Scala."
  },

  "Scala Comment": {
    "scope": "scala",
    "prefix": ["foolsComment", "comment", "note"],
    "body": ["// ${1:Your comment here}"],
    "description": "Creates a single-line comment in Scala."
  },

  "Scala Multi-Line Comment": {
    "scope": "scala",
    "prefix": ["foolsCommentMulti", "multiLineComment", "commentMultiLine", "blockComment"],
    "body": ["/*", " * ${1:Your comment here}", " */"],
    "description": "Creates a multi-line comment in Scala."
  },
  "Scala Class Syntax": {
    "scope": "scala",
    "prefix": ["foolsClass", "class", "objectTemplate"],
    "body": ["class ${1:MyClass} {", "  // Your code here", "}"],
    "description": "Creates a class in Scala."
  }
}
