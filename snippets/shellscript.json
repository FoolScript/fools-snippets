{
  "FoolScript Info": {
    "prefix": ["foolsInfo", "languageInfo", "info"],
    "body": [
      "Typing: Dynamically typed",
      "Paradigm: Imperative",
      "Compilation: Interpreted",
      "Concurrency: No"
    ],
    "description": "Provides general information about the Bash scripting language."
  },
  "FoolScript Shebang": {
    "prefix": "foolsShebang",
    "body": ["#!/bin/bash"],
    "description": "Defines the interpreter for the script."
  },
  "FoolScript Comment": {
    "prefix": ["foolsComment", "comment", "note"],
    "body": ["# ${1:Your comment here}"],
    "description": "Creates a single-line comment."
  },
  "FoolScript Multi-Line Comment": {
    "prefix": ["foolsCommentMulti", "multiLineComment", "commentMultiLine", "blockComment"],
    "body": [
      ": <<'END'",
      "${1:Your comment here}",
      "${2:Your comment here}",
      "${3:Your comment here}",
      "END"
    ],
    "description": "Creates a multi-line comment."
  },
  "FoolScript Print": {
   "prefix": ["foolsPrint", "print", "log", "systemOut", "write", "consoleLog"],
    "body": ["echo ${1:'Your message here'}"],
    "description": "Prints a message to the console."
  },
  "FoolScript Variable": {
    "prefix": ["foolsVar", "variable", "createVariable", "newVariable"],
    "body": ["${1:myVar}=${2:value}"],
    "description": "Creates a variable."
  },
  "FoolScript Read Input": {
    "prefix": "foolsRead",
    "body": ["read -p '${1:Prompt: }' ${2:varName}"],
    "description": "Reads user input and stores it in a variable."
  },
  "FoolScript If Statement": {
    "prefix": ["foolsIf", "ifStatement"],
    "body": ["if [ ${1:condition} ]; then", "  ${2:// Your code here}", "fi"],
    "description": "Creates an if statement."
  },
  "FoolScript If Else Statement": {
    "prefix": ["foolsIfElse", "ifElseStatement"],
    "body": [
      "if [ ${1:condition} ]; then",
      "  ${2:// Your code here}",
      "else",
      "  ${3:// Your code here}",
      "fi"
    ],
    "description": "Creates an if...else statement."
  },
  "FoolScript For Loop": {
    "prefix": ["foolsForLoop", "forLoop", "forX"],
    "body": ["for ${1:i} in ${2:list}; do", "  ${3:// Your code here}", "done"],
    "description": "Creates a for loop that iterates through a list."
  },
  "FoolScript While Loop": {
    "prefix": ["foolsWhileLoop", "whileLoop", "whileTrue"],
    "body": [
      "while [ ${1:condition} ]; do",
      "  ${2:// Your code here}",
      "done"
    ],
    "description": "Creates a while loop."
  },
  "FoolScript Function": {
    "prefix": ["foolsFunc", "function", "subprogram", "procedure", "subroutine", "method"],
    "body": ["${2:myFunction}() {", "  ${3:// Your code here}", "}"],
    "description": "Creates a function."
  },
  "FoolScript Function Args": {
    "prefix": ["foolsFuncArgs", "functionArgs", "functionWithArgs"],
    "body": [
      "${2:myFunction}() {",
      "  local ${3:arg1}=${4:\\$1}",
      "  local ${5:arg2}=${6:\\$2}",
      "  ${7:// Your code here}",
      "}"
    ],
    "description": "Creates a function with arguments."
  },
  "FoolScript Case Statement": {
    "prefix": ["foolsSwitch", "case", "switch"],
    "body": [
      "case ${1:variable} in",
      "  ${2:pattern1})",
      "    ${3:// Your code here}",
      "    ;;",
      "  ${4:pattern2})",
      "    ${5:// Your code here}",
      "    ;;",
      "  *)",
      "    ${6:// Your code here}",
      "    ;;",
      "esac"
    ],
    "description": "Creates a case statement."
  },
  "FoolScript Concatenate Strings": {
    "prefix": ["foolsConcat", "concatenate", "combine"],
    "body": [
      "# Bash uses string juxtaposition for concatenation:",
      "${1:var1}${2:var2}"
    ],
    "description": "Concatenates strings in Bash."
  },
  "FoolScript Constant": {
    "prefix": ["foolsConst", "constant"],
    "body": [
      "# Bash uses readonly variables for constants:",
      "readonly ${1:myConst}=${2:value}"
    ],
    "description": "Creates a constant variable in Bash using the readonly keyword."
  },
  "FoolScript Entry Point": {
    "prefix": ["foolsEntry", "entry", "start", "startingPoint"],
    "body": [
      "# Bash scripts typically start with the shebang line:",
      "#!/bin/bash"
    ],
    "description": "Defines the interpreter for the script."
  },
  "FoolScript Equal To": {
    "prefix": ["foolsEqual", "equal"],
    "body": [
      "# Bash uses '==' for string equality and '-eq' for numeric equality:",
      "[ ${1:var1} == ${2:var2} ]"
    ],
    "description": "Checks for equality in Bash."
  },
  "FoolScript For...In Loop": {
    "prefix": "foolsForIn",
    "body": [
      "for ${1:item} in ${2:list}; do",
      "  ${3:// Your code here}",
      "done"
    ],
    "description": "Iterates over items in a list in Bash."
  },
  "FoolScript Anonymous Function": {
    "prefix": ["foolsFuncAnon", "anonFunc", "anonymous", "closure" ,"lambda", "functionLiteral", "foolsFuncLambda"],
    "body": [
      "# Bash doesn't have true anonymous functions, but you can use function expressions:",
      "${1:myFunction}() { ${2:// Your code here} }"
    ],
    "description": "Creates a function expression in Bash."
  },
  "FoolScript Function Named Args": {
    "prefix": ["foolsFuncArgsNamed", "functionNamedArgs"],
    "body": [
      "# Bash doesn't directly support named arguments, but you can simulate them using associative arrays or options parsing."
    ],
    "description": "Named arguments are not directly supported in Bash."
  },
  "FoolScript Arrow Function": {
    "prefix": ["foolsFuncArrow", "arrowFunction", "functionArrow"],
    "body": ["# Bash doesn't have arrow functions."],
    "description": "Arrow functions are not supported in Bash."
  },
  "FoolScript Lambda": {
    "prefix": ["foolsFuncLambda", "foolsLambda"],
    "body": ["# Bash doesn't have lambda functions."],
    "description": "Lambda functions are not supported in Bash."
  },
  "FoolScript Function Syntax": {
    "prefix": ["foolsFuncSyntax", "functionSyntax", "functionDocs"],
    "body": [
      "# Bash Function Syntax:",
      "function ${1:functionName} {",
      "  ${2:// Your code here}",
      "}"
    ],
    "description": "Outlines the syntax for functions in Bash."
  },
  "FoolScript Generate List": {
    "prefix": ["foolsGenList", "generateList", "listGen"],
    "body": [
      "# Bash doesn't have built-in list generation, but you can use loops or command substitution:",
      "${1:myList}=( $(for i in {1..${2:10}}; do echo item$i; done) )"
    ],
    "description": "Explains how to generate a list in Bash using loops or command substitution."
  },
  "FoolScript Generate Map": {
    "prefix": ["foolsGenMap", "generateMap"],
    "body": [
      "# Bash doesn't have built-in map generation, but you can use associative arrays:",
      "declare -A ${1:myMap}; for i in {1..${2:10}}; do myMap[key$i]=value$i; done"
    ],
    "description": "Explains how to generate a map in Bash using associative arrays."
  },
  "FoolScript Interpolate String": {
    "prefix": ["foolsInterpolate", "interpolate", "variableExpansion", "variableSubstitution", "stringPlaceholders", "stringInterpolation"],
    "body": [
      "# Bash uses double quotes for variable interpolation:",
      "echo \"Hello, ${1:name}!\""
    ],
    "description": "Interpolates a string in Bash."
  },
  "FoolScript Not Equal To": {
    "prefix": ["foolsNotEqual", "notEqual", "doesNotEqual"],
    "body": [
      "# Bash uses '!=' for string inequality and '-ne' for numeric inequality:",
      "[ ${1:var1} != ${2:var2} ]"
    ],
    "description": "Checks for inequality in Bash."
  },
  "FoolScript Date Now": {
    "prefix": ["foolsNow", "now", "currentTime", "dateNow"],
    "body": ["# Get the current date and time:", "now=$(date)"],
    "description": "Gets the current date and time in Bash."
  },
  "FoolScript Mathematical Operators": {
    "prefix": ["foolsOperators", "operators", "mathDocs"],
    "body": [
      "# Bash Mathematical Operators:",
      "- Addition: +",
      "- Subtraction: -",
      "- Multiplication: *",
      "- Division: /",
      "- Modulus (Remainder): %",
      "- Exponentiation: **",
      "- Increment: ((var++)) or ((var+=1))",
      "- Decrement: ((var--)) or ((var-=1))",
      "- Assignment: =",
      "- Addition assignment: +=",
      "- Subtraction assignment: -=",
      "- Multiplication assignment: *=",
      "- Division assignment: /=",
      "- Modulus assignment: %=",
      "- Exponentiation assignment: **="
    ],
    "description": "Lists the mathematical operators in Bash."
  },
  "FoolScript Boolean Operators": {
    "prefix": ["foolsOperatorsBool", "booleanOperators", "logic"],
    "body": [
      "# Bash Boolean Operators:",
      "- Logical AND: &&",
      "- Logical OR: ||",
      "- Logical NOT: !",
      "- Equality: ==",
      "- Inequality: !=",
      "- Greater than: -gt",
      "- Less than: -lt",
      "- Greater than or equal to: -ge",
      "- Less than or equal to: -le"
    ],
    "description": "Lists the boolean operators in Bash."
  },
  "FoolScript Print Multi": {
    "prefix": ["foolsPrintMulti", "printMultiLine"],
    "body": [
      "# Use echo with -e for multi-line output:",
      "echo -e \"${1:Line 1}\\n${2:Line 2}\\n${3:Line 3}\""
    ],
    "description": "Prints a multi-line message to the console in Bash."
  },
  "FoolScript Project Structure (High-Level)": {
    "prefix": ["foolsStructure", "structure", "architecture"],
    "body": [
      "# Recommended High-Level Bash Project Structure:",
      "",
      "# - bin/",
      "#   - Contains executable scripts.",
      "# - lib/",
      "#   - Contains reusable functions and libraries.",
      "# - src/",
      "#   - Contains source code for scripts.",
      "# - test/",
      "#   - Contains unit tests.",
      "",
      "# Note:",
      "# - This is a basic structure; adjust based on project complexity and preferences."
    ],
    "description": "Explains a high-level project structure for Bash scripts."
  },
  "FoolScript Project Structure (Feature/Module)": {
    "prefix": "foolsStructureFeatures",
    "body": [
      "# Organize source code by feature or module within src/:",
      "",
      "# - src/",
      "#   - rendering/",
      "#     - Contains scripts for rendering features.",
      "#   - physics/",
      "#     - Contains scripts for physics features.",
      "#   - networking/",
      "#     - Contains scripts for networking features.",
      "#   - ... (Organize by feature or module)",
      "",
      "# Note:",
      "# - This approach promotes modularity and is suitable for larger projects."
    ],
    "description": "Explains a feature/module-based source directory organization for Bash scripts."
  },
  "FoolScript Project Structure (File Type)": {
    "prefix": "foolsStructureFiles",
    "body": [
      "# Organize source code by file type within src/:",
      "",
      "# - src/",
      "#   - utils/",
      "#     - Contains utility functions.",
      "#   - data/",
      "#     - Contains data processing scripts.",
      "#   - tasks/",
      "#     - Contains scripts for specific tasks.",
      "#   - ... (Organize by file type)",
      "",
      "# Note:",
      "# - This approach can be helpful for smaller projects or specific use cases."
    ],
    "description": "Explains a file type-based source directory organization for Bash scripts."
  },
  "FoolScript Switch Statement": {
    "prefix": ["foolsSwitch", "switch", "switchStatement", "select", "case", "when"],
    "body": [
      "case ${1:variable} in",
      "  ${2:pattern1})",
      "    ${3:// Your code here}",
      "    ;;",
      "  ${4:pattern2})",
      "    ${5:// Your code here}",
      "    ;;",
      "  *)",
      "    ${6:// Your code here}",
      "    ;;",
      "esac"
    ],
    "description": "Creates a case statement in Bash."
  },
  "FoolScript Ternary Operator": {
    "prefix": ["foolsTernary", "ternary", "conditionalOperator"],
    "body": [
      "# Bash doesn't have a ternary operator, but you can use an if statement:",
      "${1:condition} && ${2:trueValue} || ${3:falseValue}"
    ],
    "description": "Explains how to simulate a ternary operator in Bash using an if statement."
  },
  "FoolScript Throw Exception": {
    "prefix": ["foolsThrow", "throwError", "throwException"],
    "body": [
      "# Bash doesn't have exceptions, but you can exit with an error message:",
      "echo \"Error: ${1:Your message here}\" >&2; exit 1"
    ],
    "description": "Explains how to simulate exception throwing in Bash."
  },
  "FoolScript Try Catch": {
    "prefix": ["foolsTryCatch", "tryCatch"],
    "body": [
      "# Bash doesn't have try/catch, but you can use set -e and trap ERR:",
      "set -e; trap 'echo \"Error: ${1:Your message here}\" >&2; exit 1' ERR; ${2:// Your code here}"
    ],
    "description": "Explains how to simulate try/catch in Bash using set -e and trap ERR."
  },
  "FoolScript Type Check": {
    "prefix": ["foolsTypeCheck", "checkType", "getType", "typeOf"],
    "body": [
      "# Bash is dynamically typed, but you can use file or grep for basic checks:",
      "file ${1:variable} | grep -q '${2:type}'"
    ],
    "description": "Explains how to perform basic type checks in Bash."
  },
  "FoolScript This Type Check": {
    "prefix": ["thisTypeCheck", "thisType", "getThisType"],
    "body": [
      "if [[ $CLIPBOARD =~ ^-?[0-9]+$ ]]; then",
      "  echo 'integer'",
      "elif [[ $CLIPBOARD =~ ^-?[0-9]*\\.[0-9]+$ ]]; then",
      "  echo 'float'",
      "else",
      "  echo 'string'",
      "fi"
    ],
    "description": "Infers the type of the variable in the clipboard in Bash."
  },  
  "FoolScript Type Comparison": {
    "prefix": ["foolsTypeCompare", "compareTypes"],
    "body": [
      "# Bash doesn't have direct type comparison, but you can use file or grep for basic checks."
    ],
    "description": "FoolScript doesn't have direct type comparison."
  },
  "FoolScript Type Conversion": {
    "prefix": ["foolsTypeCast", "convert", "cast"],
    "body": [
      "# Bash is dynamically typed, so explicit conversion is often not needed.",
      "# However, you can use tools like awk or bc for specific conversions."
    ],
    "description": "Explains type conversion in Bash."
  },
  "FoolScript Types": {
    "prefix": ["foolsTypes", "types", "allTypes", "languageTypes", "builtInTypes", "dataTypes"],
    "body": [
      "# Bash is dynamically typed, but common data types include:",
      "- string: Textual data",
      "- integer: Numeric data (whole numbers)",
      "- float: Numeric data (decimals)",
      "- array: Ordered collection of values",
      "- associative array: Key-value pairs"
    ],
    "description": "Describes common data types in Bash."
  },
  "FoolScript Boolean Type": {
    "prefix": ["foolsTypesBool", "booleanType", "typeBool"],
    "body": ["# Bash uses 0 for false and non-zero values for true."],
    "description": "Explains how Bash represents boolean values."
  },
  "FoolScript Boolean False": {
    "prefix": ["foolsTypesBoolFalse", "false", "off", "booleanFalse"],
    "body": ["# Bash represents false as 0."],
    "description": "Indicates the representation of false in Bash."
  },
  "FoolScript Boolean True": {
    "prefix": ["foolsTypesBoolTrue", "true", "booleanTrue", "on"],
    "body": ["# Bash represents true as any non-zero value."],
    "description": "Indicates the representation of true in Bash."
  },
  "FoolScript Date Type": {
    "prefix": ["foolsTypesDate", "dateType", "typeDate", "timeType", "timestampType", "dateTimeType"],
    "body": [
      "# Bash doesn't have a dedicated date type, but you can use the 'date' command for date manipulation."
    ],
    "description": "Explains how to work with dates in Bash."
  },
  "FoolScript Dynamic Type": {
    "prefix": ["foolsTypesDynamic", "typeDynamic", "typeAny", "dynamicType", "anyType"],
    "body": [
      "# Bash is dynamically typed; variables can hold different types of values."
    ],
    "description": "Highlights the dynamic nature of Bash variables."
  },
  "FoolScript Integer Type": {
    "prefix": ["foolsTypesInt", "intType", "typeInt"],
    "body": ["# Bash treats integers as numeric values without decimals."],
    "description": "Describes integer representation in Bash."
  },
  "FoolScript List Type": {
    "prefix": ["foolsTypesList", "listType", "typeList", "typeArray"],
    "body": ["# Bash uses arrays for lists:", "myList=(item1 item2 item3)"],
    "description": "Describes list representation in Bash using arrays."
  },
  "FoolScript Map Type": {
    "prefix": ["foolsTypesMap", "mapType", "typeMap", "hashmapType", "structType", "dictType", "typeDict", "typeScruct"],
    "body": [
      "# Bash uses associative arrays for maps:",
      "declare -A myMap; myMap[key1]=value1; myMap[key2]=value2"
    ],
    "description": "Describes map representation in Bash using associative arrays."
  },
  "FoolScript Null Type": {
    "prefix": ["foolsTypesNull", "nullType", "typeNull"],
    "body": [
      "# Bash doesn't have a dedicated null type, but you can use an empty string or a special value like 'null' to represent null."
    ],
    "description": "Explains how to represent null values in Bash."
  },
  "FoolScript Number Type": {
    "prefix": ["foolsTypesNum", "numberType", "typeNumber", "doubleType", "typeDouble"],
    "body": [
      "# Bash treats numbers as either integers or floating-point values."
    ],
    "description": "Describes number representation in Bash."
  },
  "FoolScript String Type": {
    "prefix": ["foolsTypesString", "stringType", "typeString", "textType", "typeText"],
    "body": ["# Bash represents strings as sequences of characters."],
    "description": "Describes string representation in Bash."
  },
  "FoolScript Create Boolean Variable": {
    "prefix": ["foolsVarBool", "variableBool", "bool", "boolVariable", "createBool"],
    "body": [
      "# Bash uses 0 for false and non-zero values for true:",
      "${1:myBoolean}=${2:0}"
    ],
    "description": "Creates a boolean variable in Bash."
  },
  "FoolScript Create Date Variable": {
    "prefix": ["foolsVarDate", "dateVariable", "variableDate", "date"],
    "body": [
      "# Bash doesn't have a dedicated date type, but you can store date strings:",
      "${1:myDate}=\\$(date)"
    ],
    "description": "Creates a variable holding a date string in Bash."
  },
  "FoolScript Create List Variable": {
    "prefix": ["foolsVarList", "createList", "listVariable", "arrayVariable", "variableList", "variableArray", "list", "array"],
    "body": [
      "# Create an array (list):",
      "${1:myList}=( ${2:item1} ${3:item2} ${4:item3} )"
    ],
    "description": "Creates an array (list) variable in Bash."
  },
  "FoolScript Create Map Variable": {
    "prefix": ["foolsVarMap", "createMap", "createStruct", "variableMap", "variableStruct", "mapVariable", "structVariable", "dictVariable", "variableDict", "createDict"],
    "body": [
      "# Create an associative array (map):",
      "declare -A ${1:myMap}",
      "${1:myMap}[${2:key1}]=${3:value1}",
      "${1:myMap}[${4:key2}]=${5:value2}"
    ],
    "description": "Creates an associative array (map) variable in Bash."
  },
  "FoolScript Create Nullable Variable": {
    "prefix": ["foolsVarNullable", "variableNullable", "nullableVariable", "nil", "none", "nothing", "null", "option"],
    "body": [
      "# Bash doesn't have null, but you can use an empty string or a special value:",
      "${1:myVar}=${2:''}"
    ],
    "description": "Creates a variable that can hold an empty string or a special value to represent null in Bash."
  },
  "FoolScript Create Number Variable": {
    "prefix": ["foolsVarNum", "number",  "float", "floatVariable", "variableFloat", "variableNumber", "numberVariable"],
    "body": ["# Assign a numeric value:", "${1:myNumber}=${2:10}"],
    "description": "Creates a number variable in Bash."
  },
  "FoolScript Static Variable": {
    "prefix": ["foolsVarStatic", "staticVariable", "associatedConstant"],
    "body": [
      "# Bash doesn't have static variables in the same way as some other languages."
    ],
    "description": "FoolScript doesn't have static variables in the traditional sense."
  },
  "FoolScript Create String Variable": {
    "prefix": ["foolsVarString", "string", "stringVariable", "variableString", "text", "createString", "createText"],
    "body": ["# Assign a string value:", "${1:myString}=${2:'myValue'}"],
    "description": "Creates a string variable in Bash."
  },
  "FoolScript Create Multi-Line String Variable": {
    "prefix": ["foolsVarStringMulti", "multiLineString", "varStringMulti", "stringVariableMulti", "createMultiLineString"],
    "body": [
      "# Use a here document for multi-line strings:",
      "${1:myString}<<EOF",
      "${2:Line 1}",
      "${3:Line 2}",
      "${4:Line 3}",
      "EOF"
    ],
    "description": "Creates a multi-line string variable in Bash using a here document."
  },
  "FoolScript Variable Declaration Syntax": {
    "prefix": ["foolsVarSyntax", "variableSyntax", "howToVariables", "letSyntax"],
    "body": [
      "# Bash Variable Declaration Syntax:",
      "",
      "# - varName=value: Assigns a value to a variable.",
      "# - declare varName: Declares a variable without assigning a value.",
      "# - readonly varName=value: Creates a read-only variable (constant)."
    ],
    "description": "Explains Bash variable declaration syntax."
  },
  "FoolScript Create Typed Variable": {
    "prefix": ["foolsVarTyped", "typedVariable", "variableWithType"],
    "body": [
      "# Bash is dynamically typed, so variables don't have explicit types."
    ],
    "description": "FoolScript variables are dynamically typed."
  }
}
