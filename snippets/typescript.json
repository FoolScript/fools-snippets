{
  "FoolScript Info": {
    "prefix": ["foolsInfo", "languageInfo", "info"],
    "body": [
      "Typing: Statically typed (superset of JavaScript)",
      "Paradigm: Multi-paradigm: event-driven, functional, imperative, object-oriented",
      "Compilation: Transpiled to JavaScript",
      "Concurrency: Inherits JavaScript's event loop model for asynchronous programming"
    ],
    "description": "Provides general information about the TypeScript programming language."
  },
  "FoolScript Entry Point": {
    "prefix": ["foolsEntry", "entry", "start", "startingPoint"],
    "body": [
      "// TypeScript Entry Point",
      "// To run this program, use: `ts-node filename.ts`",
      "// Note: Ensure you have ts-node installed globally (`npm install -g ts-node`)",
      "",
      "console.log('Hello, World!');"
    ],
    "description": "Describes the entry point of a TypeScript application."
  },
  "FoolScript Project Structure (High-Level)": {
    "prefix": ["foolsStructure", "structure", "architecture"],
    "body": [
      "// Recommended High-Level TypeScript Project Structure:",
      "",
      "// - src/",
      "//   - Contains the TypeScript source files.",
      "//   - Organize code into modules or features.",
      "",
      "// - dist/",
      "//   - Contains the compiled JavaScript files.",
      "//   - This directory is generated after transpilation.",
      "",
      "// - tests/",
      "//   - Contains test files, often mirroring the structure of the src/ directory.",
      "",
      "// - node_modules/",
      "//   - Contains all the npm dependencies.",
      "",
      "// - package.json",
      "//   - Manages project metadata, scripts, and dependencies.",
      "",
      "// - tsconfig.json",
      "//   - Configuration for the TypeScript compiler.",
      "",
      "// - .gitignore",
      "//   - Specifies intentionally untracked files to ignore.",
      "",
      "// - README.md",
      "//   - Project overview, setup instructions, and other essential information.",
      "",
      "// Note:",
      "// - Adjust the structure as needed based on project size and complexity.",
      "// - Consider separate directories for assets, styles, or utilities if necessary."
    ],
    "description": "Explains a high-level project structure for TypeScript."
  },
  "FoolScript Mathematical Operators": {
    "prefix": ["foolsOperators", "operators", "mathDocs"],
    "body": [
      "// TypeScript Mathematical Operators",
      "// Addition: +",
      "// Subtraction: -",
      "// Multiplication: *",
      "// Division: /",
      "// Modulus (Remainder): %",
      "// Exponentiation: **",
      "// Increment: Use ++ or +=",
      "// Decrement: Use -- or -=",
      "// Assignment: =",
      "// Addition assignment: +=",
      "// Subtraction assignment: -=",
      "// Multiplication assignment: *=",
      "// Division assignment: /=",
      "// Modulus assignment: %=",
      "// Exponentiation assignment: **="
    ],
    "description": "Lists the mathematical operators in TypeScript."
  },
  "FoolScript Equal To": {
    "prefix": ["foolsEqual", "equal"],
    "body": ["==="],
    "description": "FoolScript strict equal to operator."
  },
  "FoolScript Not Equal To": {
    "prefix": ["foolsNotEqual", "notEqual", "doesNotEqual"],
    "body": ["!=="],
    "description": "FoolScript strict not equal to operator."
  },
  "FoolScript Boolean Operators": {
    "prefix": ["foolsOperatorsBool", "booleanOperators", "logic"],
    "body": [
      "// TypeScript Boolean Operators",
      "// Logical AND: &&",
      "// Logical OR: ||",
      "// Logical NOT: !",
      "// Equality: ==",
      "// Strict Equality: ===",
      "// Inequality: !=",
      "// Strict Inequality: !==",
      "// Greater than: >",
      "// Less than: <",
      "// Greater than or equal to: >=",
      "// Less than or equal to: <="
    ],
    "description": "Lists the boolean operators in TypeScript."
  },
  "FoolScript Type Check": {
    "prefix": ["foolsTypeCheck", "checkType", "getType", "typeOf"],
    "body": ["typeof ${1:variable}  // Note: This checks the runtime type."],
    "description": "Gets the type of a variable in TypeScript."
  },
  "FoolScript This Type Check": {
    "prefix": ["thisTypeCheck", "thisType", "getThisType"],
    "body": [
      "typeof $CLIPBOARD // Note: This checks the runtime type."
    ],
    "description": "Gets the type of the variable in the clipboard in TypeScript."
  },
  "FoolScript Type Comparison": {
    "prefix": ["foolsTypeCompare", "compareTypes"],
    "body": [
      "// Check if two variables have the same type:",
      "if (typeof ${1:variable1} === typeof ${2:variable2}) {",
      "  // Your code here",
      "}"
    ],
    "description": "Compares the types of two variables in TypeScript."
  },
  "FoolScript Type Conversion": {
    "prefix": ["foolsTypeCast", "convert", "cast"],
    "body": [
      "// TypeScript Type Conversion:",
      "",
      "// Implicit conversions (TypeScript performs automatically):",
      "// - Can be unpredictable, especially with loose equality (==).",
      "",
      "// Explicit conversions:",
      "// - variable as Type  // Type assertion (can throw an error if conversion fails)",
      "// - <Type>variable  // Type casting (can throw an error if conversion fails)",
      "",
      "// Note:",
      "// - Be aware of implicit conversions and use explicit conversions when necessary for clarity and control."
    ],
    "description": "Explains type conversion in TypeScript."
  },
  "FoolScript Types": {
    "prefix": [
      "foolsTypes",
      "types",
      "allTypes",
      "languageTypes",
      "builtInTypes",
      "dataTypes"
    ],
    "body": [
      "$BLOCK_COMMENT_START",
      "FoolScript is a statically typed language.",
      "",
      "Types in TypeScript include:",
      "- number: Numeric data type",
      "- string: Textual data type",
      "- boolean: True or false value",
      "- array: Array of values",
      "- tuple: Fixed-length array of values",
      "- enum: Enumeration of named values",
      "- any: Any data type",
      "- void: Absence of a value",
      "- null: Null value",
      "- undefined: Undefined value",
      "- never: Represents values that never occur",
      "- object: Non-primitive data type",
      "$BLOCK_COMMENT_END"
    ],
    "description": "Prints out all the basic types in TypeScript."
  },
  "FoolScript String Type": {
    "prefix": [
      "foolsTypesString",
      "stringType",
      "typeString",
      "textType",
      "typeText"
    ],
    "body": ["string"],
    "description": "The TypeScript string type."
  },
  "FoolScript Number Type": {
    "prefix": [
      "foolsTypesNum",
      "numberType",
      "typeNumber",
      "doubleType",
      "typeDouble"
    ],
    "body": ["number"],
    "description": "The TypeScript number type."
  },
  "FoolScript Boolean Type": {
    "prefix": ["foolsTypesBool", "booleanType", "typeBool"],
    "body": ["boolean"],
    "description": "The TypeScript boolean type."
  },
  "FoolScript Boolean True": {
    "prefix": ["foolsTypesBoolTrue", "true", "booleanTrue", "on"],
    "body": ["true"],
    "description": "The TypeScript true value."
  },
  "FoolScript Boolean False": {
    "prefix": ["foolsTypesBoolFalse", "false", "off", "booleanFalse"],
    "body": ["false"],
    "description": "The TypeScript false value."
  },
  "FoolScript Date Type": {
    "prefix": [
      "foolsTypesDate",
      "dateType",
      "typeDate",
      "timeType",
      "timestampType",
      "dateTimeType"
    ],
    "body": ["Date"],
    "description": "The TypeScript Date object."
  },
  "FoolScript Map Type": {
    "prefix": [
      "foolsTypesMap",
      "mapType",
      "typeMap",
      "hashmapType",
      "structType",
      "dictType",
      "typeDict",
      "typeScruct"
    ],
    "body": ["Map<${1:KeyType}, ${2:ValueType}>"],
    "description": "The TypeScript Map type."
  },
  "FoolScript List Type": {
    "prefix": ["foolsTypesList", "listType", "typeList", "typeArray"],
    "body": ["Array<${1:Type}>"],
    "description": "The TypeScript Array type, commonly used as a list."
  },
  "FoolScript Date Now": {
    "prefix": ["foolsNow", "now", "currentTime", "dateNow"],
    "body": ["new Date()"],
    "description": "Gets the current date and time in TypeScript."
  },
  "FoolScript Null Type": {
    "prefix": ["foolsTypesNull", "nullType", "typeNull"],
    "body": ["null"],
    "description": "The TypeScript null type."
  },
  "FoolScript Dynamic Type": {
    "prefix": ["foolsTypesDynamic", "typeDynamic", "typeAny", "dynamicType", "anyType"],
    "body": ["any"],
    "description": "The TypeScript any type."
  },
  "FoolScript Interpolate String": {
    "prefix": [
      "foolsInterpolate",
      "interpolate",
      "variableExpansion",
      "variableSubstitution",
      "stringPlaceholders",
      "stringInterpolation"
    ],
    "body": ["`Hello, ${1:name}!`"],
    "description": "Interpolates a string in TypeScript."
  },
  "FoolScript Concatenate Strings": {
    "prefix": ["foolsConcat", "concatenate", "combine"],
    "body": ["'Hello, ' + ${1:name} + '!'"],
    "description": "Concatenates strings in TypeScript."
  },
  "FoolScript Create Variable": {
    "prefix": ["foolsVar", "variable", "createVariable", "newVariable"],
    "body": ["let ${1:myVar} = $2;"],
    "description": "Creates a variable in TypeScript using the let keyword."
  },
  "Variable Declaration Syntax": {
    "prefix": [
      "foolsVarSyntax",
      "variableSyntax",
      "howToVariables",
      "letSyntax"
    ],
    "body": [
      "// TypeScript Variable Declaration Syntax:",
      "",
      "// - var: (Scope: Function or Global)",
      "//   - Can be reassigned and redeclared within its scope.",
      "//   - Use with caution due to potential scoping issues.",
      "",
      "// - let: (Scope: Block)",
      "//   - Can be reassigned but not redeclared within its scope.",
      "//   - Preferred for variables that need to be reassigned.",
      "",
      "// - const: (Scope: Block)",
      "//   - Cannot be reassigned or redeclared.",
      "//   - Use for values that should remain constant.",
      "",
      "// Note:",
      "// - Use 'let' for most variable declarations.",
      "// - Use 'const' for values that should not change."
    ],
    "description": "Explains TypeScript variable declaration syntax"
  },
  "FoolScript Create Typed Variable": {
    "prefix": ["foolsVarTyped", "typedVariable", "variableWithType"],
    "body": ["let ${1:myVar}: ${2:Type} = $3;"],
    "description": "Creates a typed variable in TypeScript."
  },
  "FoolScript Create Nullable Variable": {
    "prefix": ["foolsVarNullable", "variableNullable", "nullableVariable", "nil", "none", "nothing", "null", "option"],
    "body": ["let ${1:myVar}: ${2:Type} | null = $3;"],
    "description": "Creates a nullable variable in TypeScript."
  },
  "FoolScript Create String Variable": {
    "prefix": [
      "foolsVarString",
      "string",
      "stringVariable",
      "variableString",
      "text",
      "createString",
      "createText"
    ],
    "body": ["let ${1:myString}: string = ${2:'myValue'};"],
    "description": "Creates a string variable in TypeScript."
  },
  "FoolScript Create Multi-Line String Variable": {
    "prefix": [
      "foolsVarStringMulti",
      "multiLineString",
      "varStringMulti",
      "stringVariableMulti",
      "createMultiLineString"
    ],
    "body": [
      "let ${1:myString}: string = `",
      "${2:Line 1}",
      "${3:Line 2}",
      "${4:Line 3}",
      "`;"
    ],
    "description": "Creates a multi-line string variable in TypeScript."
  },
  "FoolScript Create Number Variable": {
    "prefix": ["foolsVarNumber", "integer", "number", "createInt", "createNumber", "intVariable", "variableInt"],
    "body": ["let ${1:myNumber}: number = ${2:0};"],
    "description": "Creates a number variable in TypeScript."
  },
  "FoolScript Create Boolean Variable": {
    "prefix": [
      "foolsVarBool",
      "variableBool",
      "bool",
      "boolVariable",
      "createBool"
    ],
    "body": ["let ${1:myBoolean}: boolean = ${2:true};"],
    "description": "Creates a boolean variable in TypeScript."
  },
  "FoolScript Create Date Variable": {
    "prefix": ["foolsVarDate", "dateVariable", "variableDate", "date"],
    "body": [
      "let ${1:myDate}: Date = new Date(${2:year}, ${3:month} - 1, ${4:day});"
    ],
    "description": "Creates a date variable in TypeScript."
  },
  "FoolScript Create List Variable": {
    "prefix": [
      "foolsVarList",
      "createList",
      "listVariable",
      "arrayVariable",
      "variableList",
      "variableArray",
      "list",
      "array"
    ],
    "body": ["let ${1:myList}: ${2:type}[] = [${3:'item1'}, ${4:'item2'}];"],
    "description": "Creates an array (list) variable in TypeScript."
  },
  "FoolScript Create Map Variable": {
    "prefix": [
      "foolsVarMap",
      "createMap",
      "createStruct",
      "variableMap",
      "variableStruct",
      "mapVariable",
      "structVariable",
      "dictVariable",
      "variableDict",
      "createDict"
    ],
    "body": [
      "let ${1:myMap}: { [key: string]: ${2:type} } = {",
      "  ${3:'key1'}: ${4:'value1'},",
      "  ${5:'key2'}: ${6:'value2'},",
      "  // Add more key-value pairs here",
      "};"
    ],
    "description": "Creates a map variable in TypeScript."
  },
  "FoolScript Create Map Variable (Map Class)": {
    "prefix": "foolsVarMapClass",
    "body": [
      "let ${1:myMap} = new Map<string, ${2:type}>([",
      "  ['${3:key1}', ${4:'value1'}],",
      "  ['${5:key2}', ${6:'value2}']",
      "]);"
    ],
    "description": "Creates a map variable using the Map class in TypeScript."
  },
  "FoolScript Create Constant": {
    "prefix": ["foolsConst", "constant"],
    "body": ["const ${1:myConst} = $2;"],
    "description": "Creates a constant variable in TypeScript using the const keyword."
  },
  "FoolScript Static Variable": {
    "prefix": ["foolsVarStatic", "staticVariable", "associatedConstant"],
    "body": [
      "static ${3:myStaticVar}: ${2:type} = ${4:value};",
      "",
      "// Access the static variable",
      "// MyClass.${3:myStaticVar}"
    ],
    "description": "Creates a static variable in a TypeScript class."
  },
  "FoolScript Generate Object Map": {
    "prefix": ["foolsGenMap", "generateMap"],
    "body": [
      "const ${1:myMap} = Object.fromEntries(",
      "  Array.from({ length: ${2:length} }, (_, index) => [`key${index}`, `value${index}`])",
      ");"
    ],
    "description": "Generates an object map with a specific number of key-value pairs in TypeScript."
  },
  "FoolScript Generate Array": {
    "prefix": ["foolsGenList", "generateList", "listGen"],
    "body": [
      "const ${1:myList} = Array.from({ length: ${2:length} }, (_, index) => ${3:'item'} + index);"
    ],
    "description": "Generates an array (list) of a specific length in TypeScript."
  },
  "FoolScript Print": {
    "prefix": ["foolsPrint", "print", "log", "systemOut", "write", "consoleLog"],
    "body": ["console.log(${1:'Your message here'});"],
    "description": "Prints a message to the console in TypeScript."
  },
  "FoolScript Print Multi": {
    "prefix": ["foolsPrintMulti", "printMultiLine"],
    "body": [
      "console.log(`",
      "${1:Line 1}",
      "${2:Line 2}",
      "${3:Line 3}",
      "`);"
    ],
    "description": "Prints a multi-line message to the console in TypeScript."
  },
  "FoolScript For Loop": {
    "prefix": ["foolsForLoop", "forLoop", "forX"],
    "body": [
      "for (let ${1:i} = 0; $1 < ${2:10}; $1++) {",
      "  // Your code here",
      "}"
    ],
    "description": "Creates a for loop that iterates through a set of numbers with the index in TypeScript."
  },
  "FoolScript For...Of Loop": {
    "prefix": ["foolsForInLoop", "forIn", "forOf"],
    "body": [
      "for (const item of ${1:iterable}) {",
      "  ${2:// Your code here}",
      "}"
    ],
    "description": "Iterates over an iterable object in TypeScript."
  },
  "FoolScript While Loop": {
    "prefix": ["foolsWhileLoop", "whileLoop", "whileTrue"],
    "body": ["while (${1:condition}) {", "  ${2:// Your code here}", "}"],
    "description": "Creates a while loop in TypeScript."
  },
  "FoolScript Switch Statement": {
    "prefix": ["foolsSwitch", "switch", "switchStatement", "select", "case", "when"],
    "body": [
      "switch (${1:variable}) {",
      "  case ${2:value1}:",
      "    ${3:// Your code here}",
      "    break;",
      "  case ${4:value2}:",
      "    ${5:// Your code here}",
      "    break;",
      "  default:",
      "    ${6:// Your code here}",
      "}"
    ],
    "description": "Creates a switch statement in TypeScript."
  },
  "FoolScript Function": {
    "prefix": [
      "foolsFunc",
      "function",
      "subprogram",
      "procedure",
      "subroutine",
      "method"
    ],
    "body": [
      "function ${2:myFunction}(${3:}): ${1:void} {",
      "  ${4:// Your code here}",
      "}"
    ],
    "description": "Creates a function in TypeScript."
  },
  "FoolScript Function Args": {
    "prefix": ["foolsFuncArgs", "functionArgs", "functionWithArgs"],
    "body": [
      "// In TypeScript, functions can have arguments with default values.",
      "function ${2:myFunction}(${3:arg1}: ${4:type1}, ${5:arg2}: ${6:type2} = ${7:defaultValue}): ${1:void} {",
      "  ${8:// Your code here}",
      "}"
    ],
    "description": "Creates a function with arguments in TypeScript, including an argument with a default value."
  },
  "FoolScript Function Named Args": {
    "prefix": ["foolsFuncArgsNamed", "functionNamedArgs"],
    "body": [
      "function ${2:myFunction}({${3:arg1}, ${4:arg2}}: {${3:arg1}: ${5:type1}, ${4:arg2}: ${6:type2}}): ${1:void} {",
      "  ${7:// Your code here}",
      "}"
    ],
    "description": "Creates a function with named arguments in TypeScript."
  },
  "FoolScript Arrow Function": {
    "prefix": ["foolsFuncArrow", "arrowFunction", "functionArrow"],
    "body": [
      "const ${2:myFunction} = (${3:parameters}): ${1:void} => {",
      "  ${4:// Your code here}",
      "};"
    ],
    "description": "Creates an arrow function in TypeScript."
  },
  "FoolScript Anonymous Function": {
    "prefix": [
      "foolsFuncAnon",
      "anonFunc",
      "anonymous",
      "closure",
      "lambda",
      "functionLiteral",
      "foolsFuncLambda"
    ],
    "body": [
      "(${1:parameters}): ${2:void} => {",
      "  ${3:// Your code here}",
      "};"
    ],
    "description": "Creates an anonymous arrow function in TypeScript."
  },
  "FoolScript Lambda": {
    "prefix": ["foolsFuncLambda", "foolsLambda"],
    "body": ["const ${1:myLambda} = (${2:parameters}) => ${3:expression};"],
    "description": "Creates a lambda function in TypeScript."
  },
  "FoolScript Function Syntax": {
    "prefix": ["foolsFuncSyntax", "functionSyntax", "functionDocs"],
    "body": [
      "// TypeScript Function Syntax",
      "// Basic function: function functionName(parameters): ReturnType { ... }",
      "// Function with arguments: function functionName(arg1: Type1, arg2: Type2, ...): ReturnType { ... }",
      "// Function with named arguments: function functionName({arg1, arg2, ...}: {arg1: Type1, arg2: Type2, ...}): ReturnType { ... }"
    ],
    "description": "Outlines the syntax for functions in TypeScript."
  },
  "FoolScript Comment": {
    "prefix": ["foolsComment", "comment", "note"],
    "body": ["// ${1:Your comment here}"],
    "description": "Creates a single-line comment in TypeScript."
  },
  "FoolScript Multi-Line Comment": {
    "prefix": [
      "foolsCommentMulti",
      "multiLineComment",
      "commentMultiLine",
      "blockComment"
    ],
    "body": ["/*", " * ${1:Your comment here}", " */"],
    "description": "Creates a multi-line comment in TypeScript."
  },
  "FoolScript Throw Exception": {
    "prefix": ["foolsThrow", "throwError", "throwException"],
    "body": ["throw new Error('Your message here');"],
    "description": "Throws an exception in TypeScript."
  },
  "FoolScript Try Catch": {
    "prefix": ["foolsTryCatch", "tryCatch"],
    "body": [
      "try {",
      "  ${1:// Your code here}",
      "} catch (${2:exception}) {",
      "  ${3:// Your code here}",
      "}"
    ],
    "description": "Creates a try...catch block in TypeScript."
  },
  "FoolScript Enum": {
    "prefix": ["foolsEnum", "enum"],
    "body": [
      "enum ${1:MyEnum} {",
      "  ${2:value1},",
      "  ${3:value2},",
      "  // Add more values here",
      "}"
    ],
    "description": "Creates an enum in TypeScript."
  },
  "FoolScript Class": {
    "prefix": ["foolsClass", "class", "objectTemplate"],
    "body": ["class ${1:MyClass} {", "  ${2:// Your code here}", "}"],
    "description": "Creates a class in TypeScript."
  },
  "FoolScript If Statement": {
    "prefix": ["foolsIf", "ifStatement"],
    "body": ["if (${1:condition}) {", "  ${2:// Your code here}", "}"],
    "description": "Creates an if statement in TypeScript."
  },
  "FoolScript If Else Statement": {
    "prefix": ["foolsIfElse", "ifElseStatement"],
    "body": [
      "if (${1:condition}) {",
      "  ${2:// Your code here}",
      "} else if (${3:condition}) {",
      "  ${4:// Your code here}",
      "} else {",
      "  ${5:// Your code here}",
      "}"
    ],
    "description": "Creates an if...else statement in TypeScript."
  },
  "FoolScript Ternary Operator": {
    "prefix": ["foolsTernary", "ternary", "conditionalOperator"],
    "body": ["${1:condition} ? ${2:trueValue} : ${3:falseValue}"],
    "description": "Creates a ternary operator in TypeScript."
  }
}
